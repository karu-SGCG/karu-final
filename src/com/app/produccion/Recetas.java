package com.app.produccion;

import com.entidades.IngredientesId;
import com.entidades.MtArticulos;
import com.entidades.MtConversionUnidades;
import com.entidades.MtConversionUnidadesId;
import com.entidades.MtMarcas;
import com.entidades.MtMonedas;
import com.entidades.MtTiposArticulos;
import com.entidades.Ingredientes;
import com.entidades.MtUnidMedidas;
import static java.awt.event.KeyEvent.VK_F9;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Query;
import org.hibernate.Session;
import util.HibernateUtil;
import com.app.seguridad.Permisos;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.util.ArrayList;
import net.sf.jasperreports.engine.JRException;
import org.hibernate.HibernateException;
import util.buscar.BusquedaArticulos;

/**
 * @author Carlos Pati√±o
 */
public class Recetas extends javax.swing.JDialog {

    /**
     * Creates new form Recetas
     */
    private String usuario;
    private String origen = "";
    private String formulario;
    private MtArticulos masterArt;
    private int posicion;
    private List<Object> ArrayPrimaryKey;

    public Recetas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        hibernateSession();

        this.usuario = "karu";
        this.formulario = this.getClass().getSimpleName();

        arranque();
    }

    public Recetas(String user) {
        initComponents();
        hibernateSession();

        this.usuario = user;
        this.formulario = this.getClass().getSimpleName();

        arranque();
    }

    private Session st;
    private DefaultTableModel model;

    private void hibernateSession() {
        st = HibernateUtil.getSessionFactory().openSession();
    }

    private void arranque() {
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setVisible(true);
        this.cmdCancelar.setEnabled(false);

        cargarComboTipoArt();
        cargarCombosMedidas();
        buscarRegistros();

        tableModel();
    }

    public void tableModel() {
        tabIngredientes.getColumnModel().getColumn(0).setPreferredWidth(40);
        tabIngredientes.getColumnModel().getColumn(0).setPreferredWidth(80);
        tabIngredientes.getColumnModel().getColumn(0).setPreferredWidth(80);
        tabIngredientes.getColumnModel().getColumn(0).setPreferredWidth(250);
        tabIngredientes.getColumnModel().getColumn(0).setPreferredWidth(80);

        model = (DefaultTableModel) this.tabIngredientes.getModel();
        model.setNumRows(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        cmdNuevo = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        cmdEditar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        cmdInforme = new javax.swing.JButton();
        cmdBuscar = new javax.swing.JButton();
        tabPaneReceta = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodProducto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDescripcionProd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCostoProd = new javax.swing.JFormattedTextField();
        chkCostoFijo = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPrecioVenta = new javax.swing.JFormattedTextField();
        chkPrecioFijo = new javax.swing.JCheckBox();
        chkFraccionable = new javax.swing.JCheckBox();
        txtValRentabilidad = new javax.swing.JFormattedTextField();
        cmbTipoArticulo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbUnidadMedidaVenta = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPorciones = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDiasVenc = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabIngredientes = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCantUsada = new javax.swing.JFormattedTextField();
        txtIngrediente = new javax.swing.JTextField();
        lblUnidConsumo = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        cmdAgregarIng = new javax.swing.JButton();
        cmdQuitarIng = new javax.swing.JButton();
        cmdBuscarIng = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        btnUltimo = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnPrimero = new javax.swing.JButton();
        cmdCerrar = new javax.swing.JButton();
        lblInfoPie = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Recetas - KARU SGCG v1.0");
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setResizable(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmdNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/New.png"))); // NOI18N
        cmdNuevo.setToolTipText("Nuevo");
        cmdNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Save.png"))); // NOI18N
        cmdGuardar.setToolTipText("Aceptar");
        cmdGuardar.setEnabled(false);
        cmdGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/cancel32.png"))); // NOI18N
        cmdCancelar.setToolTipText("Cancelar");
        cmdCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        cmdEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/edit.png"))); // NOI18N
        cmdEditar.setToolTipText("Editar");
        cmdEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Trashcan_empty.png"))); // NOI18N
        cmdBorrar.setToolTipText("Eliminar");
        cmdBorrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdBorrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        cmdInforme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Tasks.png"))); // NOI18N
        cmdInforme.setToolTipText("Informe");
        cmdInforme.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdInforme.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdInforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInformeActionPerformed(evt);
            }
        });

        cmdBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Search (2).png"))); // NOI18N
        cmdBuscar.setToolTipText("Buscar");
        cmdBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(cmdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmdNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdInforme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabPaneReceta.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("C√≥digo");

        txtCodProducto.setBackground(new java.awt.Color(255, 255, 204));
        txtCodProducto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtCodProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodProductoActionPerformed(evt);
            }
        });
        txtCodProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodProductoFocusLost(evt);
            }
        });

        jLabel2.setText("Descripci√≥n");

        jLabel3.setText("Costo Producci√≥n");

        txtCostoProd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtCostoProd.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        chkCostoFijo.setSelected(true);
        chkCostoFijo.setText("Costo Fijo");
        chkCostoFijo.setToolTipText("Mantener un costo fijo de producci√≥n");
        chkCostoFijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCostoFijoActionPerformed(evt);
            }
        });

        jLabel4.setText("Rentabilidad (%)");

        jLabel5.setText("Precio Final Venta");

        txtPrecioVenta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtPrecioVenta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPrecioVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioVentaActionPerformed(evt);
            }
        });

        chkPrecioFijo.setSelected(true);
        chkPrecioFijo.setText("Precio Fijo");
        chkPrecioFijo.setToolTipText("Mantener un precio fijo de venta del producto");
        chkPrecioFijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPrecioFijoActionPerformed(evt);
            }
        });

        chkFraccionable.setText("Es fraccionable (se puede vender por partes o n√∫meros decimales)");
        chkFraccionable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFraccionableActionPerformed(evt);
            }
        });

        txtValRentabilidad.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtValRentabilidad.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtValRentabilidad.setEnabled(false);
        txtValRentabilidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValRentabilidadFocusLost(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Tipo");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Unid. de Venta");

        jLabel8.setText("Porciones / Raciones");

        txtPorciones.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPorciones.setToolTipText("Porciones de referencia para la receta");
        txtPorciones.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorcionesFocusLost(evt);
            }
        });
        txtPorciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPorcionesKeyTyped(evt);
            }
        });

        jLabel10.setText("D√≠as p/ Vencimiento");

        txtDiasVenc.setToolTipText("Cantidad de d√≠as promedio apto para consumo");
        txtDiasVenc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDiasVencFocusLost(evt);
            }
        });
        txtDiasVenc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiasVencKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkPrecioFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txtCodProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescripcionProd, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkFraccionable, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(txtCostoProd, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkCostoFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValRentabilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTipoArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(104, 104, 104)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbUnidadMedidaVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createSequentialGroup()
                                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel10)
                                        .addComponent(txtPorciones, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtDiasVenc, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))))))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescripcionProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCostoProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCostoFijo)
                    .addComponent(txtPorciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtValRentabilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDiasVenc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkPrecioFijo))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTipoArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbUnidadMedidaVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(chkFraccionable)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPaneReceta.addTab("General", jPanel1);

        tabIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cant.", "U. de Medida", "C√≥digo", "Descripci√≥n", "Costo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabIngredientes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tabIngredientes);

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("Ingrediente");

        jLabel7.setText("Cantidad");

        txtCantUsada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtCantUsada.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCantUsada.setToolTipText("Cantidad a utilizar");

        txtIngrediente.setEditable(false);
        txtIngrediente.setBackground(new java.awt.Color(204, 255, 255));
        txtIngrediente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIngredienteKeyPressed(evt);
            }
        });

        lblUnidConsumo.setText("...");

        cmdAgregarIng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/plus.png"))); // NOI18N
        cmdAgregarIng.setText("Agregar");
        cmdAgregarIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgregarIngActionPerformed(evt);
            }
        });

        cmdQuitarIng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/DeleteUser.png"))); // NOI18N
        cmdQuitarIng.setText("Quitar");
        cmdQuitarIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdQuitarIngActionPerformed(evt);
            }
        });

        cmdBuscarIng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/icon_buscar.png"))); // NOI18N
        cmdBuscarIng.setText("Buscar");
        cmdBuscarIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarIngActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmdAgregarIng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdQuitarIng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdBuscarIng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(cmdBuscarIng)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmdAgregarIng)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdQuitarIng)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(txtCantUsada, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblUnidConsumo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtCantUsada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUnidConsumo)))
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        tabPaneReceta.addTab("Receta de Ingredientes", jPanel2);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel10.setToolTipText("Panel de Navegaci√≥n");

        btnUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/ULTIMO.png"))); // NOI18N
        btnUltimo.setToolTipText("√öltimo Registro");
        btnUltimo.setMaximumSize(new java.awt.Dimension(24, 24));
        btnUltimo.setMinimumSize(new java.awt.Dimension(24, 24));
        btnUltimo.setPreferredSize(new java.awt.Dimension(24, 24));
        btnUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoActionPerformed(evt);
            }
        });

        btnSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/SIGUIENTE.png"))); // NOI18N
        btnSiguiente.setToolTipText("Registro Siguiente");
        btnSiguiente.setMaximumSize(new java.awt.Dimension(24, 24));
        btnSiguiente.setMinimumSize(new java.awt.Dimension(24, 24));
        btnSiguiente.setPreferredSize(new java.awt.Dimension(24, 24));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/ANTERIOR.png"))); // NOI18N
        btnAnterior.setToolTipText("Registro Anterior");
        btnAnterior.setMaximumSize(new java.awt.Dimension(24, 24));
        btnAnterior.setMinimumSize(new java.awt.Dimension(24, 24));
        btnAnterior.setPreferredSize(new java.awt.Dimension(24, 24));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnPrimero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/primero.png"))); // NOI18N
        btnPrimero.setToolTipText("Primer Registro");
        btnPrimero.setMaximumSize(new java.awt.Dimension(24, 24));
        btnPrimero.setMinimumSize(new java.awt.Dimension(24, 24));
        btnPrimero.setPreferredSize(new java.awt.Dimension(24, 24));
        btnPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeroActionPerformed(evt);
            }
        });

        cmdCerrar.setText("Cerrar");
        cmdCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCerrarActionPerformed(evt);
            }
        });

        lblInfoPie.setText("Karu");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInfoPie, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmdCerrar)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdCerrar)
                    .addComponent(lblInfoPie))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tabPaneReceta)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabPaneReceta, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        Permisos per = new Permisos();
        Boolean inserto = per.PuedeInsertar(usuario, formulario);
        if (!inserto) {
            JOptionPane.showMessageDialog(null, "El usuario " + usuario + " no tiene permiso para insertar"
                    + " en el formulario " + formulario, "Permisos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            origen = "Nuevo";
            this.cmbTipoArticulo.setEnabled(true);
            this.cmbTipoArticulo.setSelectedIndex(-1);
            this.txtPorciones.setText("1");
            inicializarCampos();
            deshabilitarBotones();
        }
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        guardar();
        buscarRegistros();
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        origen = "";
        habilitarBotones();
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditarActionPerformed
        Permisos per = new Permisos();
        Boolean edito = per.PuedeModificar(usuario, formulario);
        if (!edito) {
            JOptionPane.showMessageDialog(null, "El usuario " + usuario + " no tiene permiso para editar"
                    + " en el formulario " + formulario, "Permisos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            origen = "Editar";
            this.txtCodProducto.setEditable(false);
            deshabilitarBotones();
            this.txtCodProducto.setEditable(true);
        }
    }//GEN-LAST:event_cmdEditarActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
        Permisos per = new Permisos();
        Boolean elimino = per.PuedeEliminar(usuario, formulario);
        if (!elimino) {
            JOptionPane.showMessageDialog(null, "El usuario " + usuario + " no tiene permiso para eliminar"
                    + " en el formulario " + formulario, "Permisos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            eliminar();
            buscarRegistros();
        }
    }//GEN-LAST:event_cmdBorrarActionPerformed

    private void cmdInformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInformeActionPerformed
        if (this.txtCodProducto.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto para imprimir receta.",
                    "Imprimir Recetas", JOptionPane.INFORMATION_MESSAGE);
        } else {
            informe();
        }
    }//GEN-LAST:event_cmdInformeActionPerformed

    private void txtIngredienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIngredienteKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            buscarIngrediente();
        }
    }//GEN-LAST:event_txtIngredienteKeyPressed

    private void cmdBuscarIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarIngActionPerformed
        buscarIngrediente();
        this.txtCantUsada.selectAll();
        this.txtCantUsada.grabFocus();
    }//GEN-LAST:event_cmdBuscarIngActionPerformed

    private void cmdQuitarIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdQuitarIngActionPerformed
        quitarElemento();
    }//GEN-LAST:event_cmdQuitarIngActionPerformed

    private void cmdAgregarIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgregarIngActionPerformed
        agregarIngrediente();
    }//GEN-LAST:event_cmdAgregarIngActionPerformed

    private void chkFraccionableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFraccionableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkFraccionableActionPerformed

    private void txtCodProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodProductoFocusLost
        if (origen.equals("Nuevo")) {
            String cod = this.txtCodProducto.getText().toUpperCase();
            this.txtCodProducto.setText(cod);
            MtArticulos art = null;
            if (!cod.isEmpty()) {
                art = obtenerProducto(cod);

                if (art != null) {
                    JOptionPane.showMessageDialog(null, "Ya existe un art√≠culo con el c√≥digo ingresado. "
                            + "\n" + "ingrese otro.", "Recetas", JOptionPane.INFORMATION_MESSAGE);
                    this.txtCodProducto.grabFocus();
                    this.txtCodProducto.selectAll();
                }
            }
        }
    }//GEN-LAST:event_txtCodProductoFocusLost

    private void txtValRentabilidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValRentabilidadFocusLost
        try {
            this.txtValRentabilidad.commitEdit();
            if (this.txtValRentabilidad.isEnabled()) {
                if (this.txtValRentabilidad.getText().isEmpty()) {
                    this.txtValRentabilidad.setValue(BigDecimal.ONE);
                }

                BigDecimal precio = BigDecimal.ZERO;
                BigDecimal rent = new BigDecimal(this.txtValRentabilidad.getValue().toString());
                precio = calcularNuevoPrecio(rent);
                this.txtPrecioVenta.setValue(precio);
            }
        } catch (Exception e) {
            this.txtValRentabilidad.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtValRentabilidadFocusLost

    private void chkCostoFijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCostoFijoActionPerformed
        if (!this.chkCostoFijo.isSelected()) {
            actualizarTotales();
        } else {
            this.txtCostoProd.grabFocus();
            this.txtCostoProd.selectAll();
        }
    }//GEN-LAST:event_chkCostoFijoActionPerformed

    private void chkPrecioFijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPrecioFijoActionPerformed
        if (!this.chkPrecioFijo.isSelected()) {
            this.txtValRentabilidad.setEnabled(true);
        } else {
            this.txtValRentabilidad.setEnabled(false);
            //this.txtPrecioVenta.setValue(this.txtCostoProd.getValue());
            this.txtPrecioVenta.grabFocus();
            this.txtPrecioVenta.selectAll();
        }
    }//GEN-LAST:event_chkPrecioFijoActionPerformed

    private void txtPrecioVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioVentaActionPerformed

    private void txtPorcionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPorcionesKeyTyped
        char car = evt.getKeyChar();
        if (txtPorciones.getText().length() >= 10) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPorcionesKeyTyped

    private void txtPorcionesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcionesFocusLost
        if (this.txtPorciones.getText().isEmpty() || this.txtPorciones.getText().equals("0")) {
            this.txtPorciones.setText("1");
        }
    }//GEN-LAST:event_txtPorcionesFocusLost

    private void txtDiasVencKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiasVencKeyTyped
        char car = evt.getKeyChar();
        if (txtDiasVenc.getText().length() >= 10) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDiasVencKeyTyped

    private void txtDiasVencFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiasVencFocusLost
        if (this.txtDiasVenc.getText().isEmpty() || this.txtDiasVenc.getText().trim().equals("")) {
            this.txtDiasVenc.setText("1");
        }
    }//GEN-LAST:event_txtDiasVencFocusLost

    private void btnUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoActionPerformed
        ultimo();
    }//GEN-LAST:event_btnUltimoActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        siguiente();
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        anterior();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeroActionPerformed
        primero();
    }//GEN-LAST:event_btnPrimeroActionPerformed

    private void cmdCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCerrarActionPerformed
        this.st.close();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cmdCerrarActionPerformed

    private void txtCodProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodProductoActionPerformed

    private void cmdBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarActionPerformed
        origen = "Buscar";
        buscarRegistros();
    }//GEN-LAST:event_cmdBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Recetas dialog = new Recetas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnPrimero;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton btnUltimo;
    private javax.swing.JCheckBox chkCostoFijo;
    private javax.swing.JCheckBox chkFraccionable;
    private javax.swing.JCheckBox chkPrecioFijo;
    private javax.swing.JComboBox cmbTipoArticulo;
    private javax.swing.JComboBox cmbUnidadMedidaVenta;
    private javax.swing.JButton cmdAgregarIng;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdBuscar;
    private javax.swing.JButton cmdBuscarIng;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdCerrar;
    private javax.swing.JButton cmdEditar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdInforme;
    private javax.swing.JButton cmdNuevo;
    private javax.swing.JButton cmdQuitarIng;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInfoPie;
    private javax.swing.JLabel lblUnidConsumo;
    private javax.swing.JTable tabIngredientes;
    private javax.swing.JTabbedPane tabPaneReceta;
    private javax.swing.JFormattedTextField txtCantUsada;
    private javax.swing.JTextField txtCodProducto;
    private javax.swing.JFormattedTextField txtCostoProd;
    private javax.swing.JTextField txtDescripcionProd;
    private javax.swing.JTextField txtDiasVenc;
    private javax.swing.JTextField txtIngrediente;
    private javax.swing.JTextField txtPorciones;
    private javax.swing.JFormattedTextField txtPrecioVenta;
    private javax.swing.JFormattedTextField txtValRentabilidad;
    // End of variables declaration//GEN-END:variables

    public void habilitarBotones() {
        this.cmdNuevo.setEnabled(true);
        this.cmdEditar.setEnabled(true);
        this.cmdGuardar.setEnabled(false);
        this.cmdBorrar.setEnabled(true);
    }

    public void deshabilitarBotones() {
        this.cmdNuevo.setEnabled(false);
        this.cmdEditar.setEnabled(false);
        this.cmdGuardar.setEnabled(true);
        this.cmdBorrar.setEnabled(false);
    }

    public void inicializarCampos() {
        this.txtCodProducto.setText("");
        this.txtDescripcionProd.setText("");
        this.txtCostoProd.setValue(0);
        this.txtPorciones.setText("");
        this.txtDiasVenc.setText("");
        this.txtPrecioVenta.setValue(0);
        tableModel();
    }

    public void cargarComboTipoArt() {
        this.cmbTipoArticulo.removeAllItems();
        List<MtTiposArticulos> lista = (List<MtTiposArticulos>) st.createQuery("From MtTiposArticulos").list();
        for (MtTiposArticulos cargoList : lista) {
            this.cmbTipoArticulo.addItem(cargoList.getNomTipoArticulo());
        }
    }

    public void buscarIngrediente() {
        try {
            BusquedaArticulos formBusqueda = new BusquedaArticulos(this, true, "Buscar Ingrediente",
                    "mt_articulos", "cod_articulo", "nom_articulo", "receta");
            formBusqueda.setDefaultCloseOperation(HIDE_ON_CLOSE);
            formBusqueda.setVisible(true);
            String codigo = formBusqueda.getCodigo();
            String nombre = formBusqueda.getDescripcion();

            if (nombre != null) {
                this.txtIngrediente.setText(nombre);
                masterArt = obtenerIngrediente(codigo);

                if (masterArt != null) {
                    this.txtIngrediente.setText(masterArt.getNomArticulo());
                    this.lblUnidConsumo.setText(masterArt.getMtUnidMedidasByUniMedidaVenta().getDescUnidad());
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al buscar ingrediente. " + "\n"
                    + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
    }

    public MtArticulos obtenerIngrediente(String cod) {
        MtArticulos art = null;
        try {
            //art = (MtArticulos) st.get(MtArticulos.class, cod);

            Query query = st.createQuery("From MtArticulos a Where a.codArticulo = ? and a.esMateriaPrima = ?");
            query.setParameter(0, cod);
            query.setParameter(1, 'M');

            art = (MtArticulos) query.uniqueResult();

            if (art == null) {
                JOptionPane.showMessageDialog(null, "C√≥digo del art√≠culo buscado no existe.",
                        "Recetas", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
        return art;
    }

    public MtArticulos obtenerProducto(String cod) {
        MtArticulos art = null;
        try {
            Query query = st.createQuery("From MtArticulos a Where a.codArticulo = ? and a.esMateriaPrima <> ?");
            query.setParameter(0, cod);
            query.setParameter(1, 'M');

            art = (MtArticulos) query.uniqueResult();
        } catch (HibernateException e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
        return art;
    }

    public MtUnidMedidas obtenerUnidMedida(String cod) {
        MtUnidMedidas unid = null;
        try {
            unid = (MtUnidMedidas) st.get(MtUnidMedidas.class, cod);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta de unidades de medidas. "
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
        return unid;
    }

    public void cargarCombosMedidas() {
        this.cmbUnidadMedidaVenta.removeAllItems();
        List<MtUnidMedidas> lista = (List<MtUnidMedidas>) st.createQuery("From MtUnidMedidas").list();
        for (MtUnidMedidas listaMedida : lista) {
            this.cmbUnidadMedidaVenta.addItem(listaMedida.getDescUnidad());
        }
    }

    public void agregarIngrediente() {
        try {
            BigDecimal cant = new BigDecimal(this.txtCantUsada.getText());
            if (!this.txtIngrediente.getText().isEmpty()) {
                if ((cant.compareTo(BigDecimal.ZERO)) > 0) {

                    model.addRow(new Object[]{
                        cant,
                        masterArt.getMtUnidMedidasByUniMedidaVenta().getDescUnidad(),
                        masterArt.getCodArticulo(),
                        masterArt.getNomArticulo(),
                        obtenerCosto(cant)});

                    this.txtIngrediente.setText("");
                    this.txtCantUsada.setValue(null);
                    this.lblUnidConsumo.setText("");

                    actualizarTotales();

                } else {
                    JOptionPane.showMessageDialog(null, "La cantidad a ser utilizada debe ser mayor a 0 (cero). ",
                            "Recetas", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un ingrediente para agregar a la lista. ",
                        "Recetas", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al agregar el ingrediente a la lista. "
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
    }

    public BigDecimal obtenerCosto(BigDecimal cant) {
        BigDecimal retorno = BigDecimal.ZERO;
        try {
            BigDecimal conversion = obtenerConversion();

            if (conversion.compareTo(BigDecimal.ZERO) > 0) {
                retorno = (masterArt.getPrecioCompra().multiply(cant));
                retorno = retorno.divide(conversion).setScale(0, RoundingMode.UP); //redondea para arriba el valor
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ al calcular costo del ingrediente. "
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
        return retorno;
    }

    public BigDecimal obtenerConversion() {
        //Destino * Factor = Origen
        BigDecimal retorno = BigDecimal.ZERO;
        MtConversionUnidades res = null;

        try {
            MtConversionUnidadesId id = new MtConversionUnidadesId();
            id.setCodUniOri(masterArt.getMtUnidMedidasByUniMedidaCom().getCodUnidad());
            id.setCodUniDes(masterArt.getMtUnidMedidasByUniMedidaVenta().getCodUnidad());

            res = (MtConversionUnidades) st.get(MtConversionUnidades.class, id);

            if (res == null) {
                JOptionPane.showMessageDialog(null, "No se ha fijado factor de conversion para las unidades buscadas.",
                        "Recetas", JOptionPane.ERROR_MESSAGE);
            } else {
                retorno = res.getFactor();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ al obtener factor de conversion de unidades. "
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
        return retorno;
    }

    public BigDecimal calcularNuevoPrecio(BigDecimal rent) {
        BigDecimal retorno = BigDecimal.ZERO;
        BigDecimal costoProd = BigDecimal.ZERO;

        try {

            costoProd = new BigDecimal(this.txtCostoProd.getValue().toString());
            retorno = costoProd.multiply(rent.add(new BigDecimal(100)));
            retorno = retorno.divide(new BigDecimal(100)).setScale(0, RoundingMode.UP);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al calcular nuevo precio."
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

        return retorno;
    }

    private void actualizarTotales() {
        BigDecimal costoArt = BigDecimal.ZERO;
        BigDecimal totalCostoArt = BigDecimal.ZERO;
        int cantArt = model.getRowCount();

        try {
            if (cantArt > 0) {
                for (int i = 0; i < cantArt; i++) {
                    costoArt = new BigDecimal(model.getValueAt(i, 4).toString());
                    totalCostoArt = totalCostoArt.add(costoArt);
                }
            }

            this.txtCostoProd.setValue(totalCostoArt);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al actualizar totales."
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void quitarElemento() {
        try {
            int selectedRow = this.tabIngredientes.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un registro para eliminar.",
                        "Recetas", JOptionPane.ERROR_MESSAGE);
            } else {
                model.removeRow(selectedRow);
                actualizarTotales();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al quitar art√≠culo de la lista. "
                    + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public void guardar() {
        //guarda la cabecera en la tabla mtArticulos
        try {
            MtArticulos art = new MtArticulos();

            st.beginTransaction();

            MtMarcas codigoMarca = retornoMarcaPorCodigo("CAS");

            Object tipoArt = this.cmbTipoArticulo.getSelectedItem();
            MtTiposArticulos codigoTipoArticulo = retornoTipoPorDescripcion(tipoArt.toString());

            MtMonedas codMonedaCo = retornoMoneda(1);
            MtMonedas codMonedaVe = retornoMoneda(1);

            String varCodUniVen = this.cmbUnidadMedidaVenta.getSelectedItem().toString();
            MtUnidMedidas codUniCom = retornoUnidMedidaPorDescripcion(varCodUniVen);
            MtUnidMedidas codUniVen = codUniCom;

            if (origen.equals("Nuevo")) {
                art.setCodArticulo(txtCodProducto.getText());
                art.setNomArticulo(this.txtDescripcionProd.getText());
                art.setMtMarcas(codigoMarca);
                art.setReferencia(this.txtDescripcionProd.getText());
                art.setMtTiposArticulos(codigoTipoArticulo);
                art.setMtMonedasByCodMonedaCompra(codMonedaCo);
                art.setMtMonedasByCodMonedaVenta(codMonedaVe);
                art.setMtUnidMedidasByUniMedidaCom(codUniCom);
                art.setMtUnidMedidasByUniMedidaVenta(codUniVen);
                art.setPrecioCompra(new BigDecimal(this.txtCostoProd.getValue().toString()));
                art.setPrecioVenta(new BigDecimal(this.txtPrecioVenta.getValue().toString()));
                art.setImpuesto(10);
                art.setControlStock('S');
                art.setEsMateriaPrima('E');
                art.setCantDiasVenc(Integer.parseInt(this.txtDiasVenc.getText()));
                art.setFraccionable(this.chkFraccionable.isSelected());
                art.setAccionMod(origen);
                art.setUsuarioMod(usuario);
                art.setFechaMod(new Date());

                guardarIngredientes();
                st.save(art);

            } else {
                art = obtenerProducto(this.txtCodProducto.getText());

                art.setNomArticulo(this.txtDescripcionProd.getText());
                art.setMtMarcas(codigoMarca);
                art.setReferencia(this.txtDescripcionProd.getText());
                art.setMtTiposArticulos(codigoTipoArticulo);
                art.setMtMonedasByCodMonedaCompra(codMonedaCo);
                art.setMtMonedasByCodMonedaVenta(codMonedaVe);
                art.setMtUnidMedidasByUniMedidaCom(codUniCom);
                art.setMtUnidMedidasByUniMedidaVenta(codUniVen);
                art.setPrecioCompra(new BigDecimal(this.txtCostoProd.getValue().toString()));
                art.setPrecioVenta(new BigDecimal(this.txtPrecioVenta.getValue().toString()));
                art.setImpuesto(10);
                art.setControlStock('S');
                art.setEsMateriaPrima('E');
                art.setCantDiasVenc(Integer.parseInt(this.txtDiasVenc.getText()));
                art.setFraccionable(this.chkFraccionable.isSelected());
                art.setAccionMod(origen);
                art.setUsuarioMod(usuario);
                art.setFechaMod(new Date());

                borrarIngredientes(art);
                guardarIngredientes();
                st.update(art);
            }

            st.getTransaction().commit();

            habilitarBotones();

        } catch (NumberFormatException | HibernateException ex) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al guardar registro de la receta. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(), "Recetas", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void borrarIngredientes(MtArticulos art) {
        try {
            List<Ingredientes> borrar = obtenerDetalle(art);

            for (Ingredientes var : borrar) {
                st.delete(var);
            }
        } catch (HibernateException e) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al borrar ingredientes de la receta. "
                    + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Recetas", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public List<Ingredientes> obtenerDetalle(MtArticulos art) {
        List<Ingredientes> lista = new ArrayList<Ingredientes>();
        try {
            lista = (List<Ingredientes>) st.createQuery(
                    "FROM Ingredientes a JOIN a.id i WHERE i.articulo = ?")
                    .setParameter(0, art.getCodArticulo())
                    .list();
        } catch (HibernateException ex) {
            ex.printStackTrace();
        }
        return lista;
    }

    public void cargarGrilla(List<Ingredientes> lista) {
        try {
            for (Ingredientes det : lista) {

                MtUnidMedidas unid = retornoUnidMedidaPorCodigo(det.getMedida());
                MtArticulos art = obtenerIngrediente(det.getIngrediente());

                model.addRow(new Object[]{
                    det.getCantidad(), unid.getDescUnidad(), det.getIngrediente(),
                    art.getNomArticulo(), det.getCosto()
                });
                this.txtPorciones.setText(String.valueOf(det.getPorciones()));
           }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void borrarReceta() {
        try {
            st.clear();
            st.beginTransaction();

            MtArticulos art = obtenerProducto(this.txtCodProducto.getText());

            borrarIngredientes(art);

            st.delete(art);
            st.getTransaction().commit();

            inicializarCampos();

            JOptionPane.showMessageDialog(null, "Receta borrada exitosamente.",
                    "Recetas", JOptionPane.INFORMATION_MESSAGE);

        } catch (HeadlessException | HibernateException e) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al borrar la Receta. "
                    + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Recetas", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void guardarIngredientes() {
        int cantArt = model.getRowCount();

        try {
            for (int i = 0; i < cantArt; i++) {

                Ingredientes ing = new Ingredientes();
                IngredientesId id = new IngredientesId();

                String medida = model.getValueAt(i, 1).toString();
                MtUnidMedidas codMedida = retornoUnidMedidaPorDescripcion(medida);

                id.setArticulo(this.txtCodProducto.getText());
                id.setLinea(i + 1);

                ing.setId(id);
                ing.setCantidad(new BigDecimal(model.getValueAt(i, 0).toString()));
                ing.setMedida(codMedida.getCodUnidad());
                ing.setIngrediente(model.getValueAt(i, 2).toString());
                ing.setCosto(new BigDecimal(model.getValueAt(i, 4).toString()));
                ing.setPorciones(Integer.parseInt(this.txtPorciones.getText()));

                st.save(ing);
            }

        } catch (NumberFormatException | HibernateException e) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al guardar los ingredientes de la receta. "
                    + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Recetas", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public void eliminar() {
        int seleccion = JOptionPane.showConfirmDialog(null, "Est√° seguro que desea borrar esta Receta?",
                "Recetas", JOptionPane.YES_NO_OPTION);
        if (seleccion == 0) {
            borrarReceta();
            buscarRegistros();
        }
    }

    public MtMarcas retornoMarcaPorDescripcion(String descripcion) {
        MtMarcas tipRet = null;
        try {
            Query query = st.createQuery("From MtMarcas c Where c.nomMarca = ?");
            query.setParameter(0, descripcion);
            try {
                tipRet = (MtMarcas) query.uniqueResult();
            } catch (HibernateException e) {
                JOptionPane.showMessageDialog(null, "Hay m√°s masrcas con nombre: " + descripcion);
            }
        } catch (Exception e) {

        }
        return tipRet;
    }

    public MtMarcas retornoMarcaPorCodigo(String codigo) {
        MtMarcas tipRet = null;
        try {
            Query query = st.createQuery("From MtMarcas c Where c.codMarca = ?");
            query.setParameter(0, codigo);
            try {
                tipRet = (MtMarcas) query.uniqueResult();
            } catch (HibernateException e) {
                JOptionPane.showMessageDialog(null, "Hay m√°s marcas con el c√≥digo: " + codigo);
            }
        } catch (HeadlessException | HibernateException e) {

        }
        return tipRet;
    }

    public MtTiposArticulos retornoTipoPorDescripcion(String descripcion) {
        MtTiposArticulos tipRet = null;
        try {
            Query query = st.createQuery("From MtTiposArticulos c Where c.nomTipoArticulo = ?");
            query.setParameter(0, descripcion);
            try {
                tipRet = (MtTiposArticulos) query.uniqueResult();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Hay m√°s tipos con nombre: " + descripcion);
            }

        } catch (Exception e) {
        }
        return tipRet;
    }

    public MtMonedas retornoMoneda(int cod) {
        MtMonedas mon = null;
        try {
            mon = (MtMonedas) st.get(MtMonedas.class, cod);
            if (mon == null) {
                JOptionPane.showMessageDialog(null, "C√≥digo buscado no existe. Intente de nuevo.",
                        "Recetas", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta monedas. "
                    + "\n" + e.getMessage(), "Recetas", JOptionPane.ERROR_MESSAGE);
        }
        return mon;
    }

    public MtUnidMedidas retornoUnidMedidaPorDescripcion(String descripcion) {
        MtUnidMedidas tipRet = null;
        try {
            Query query = st.createQuery("From MtUnidMedidas c Where c.descUnidad = ?");
            query.setParameter(0, descripcion);
            try {
                tipRet = (MtUnidMedidas) query.uniqueResult();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Hay m√°s unidades de tipo: " + descripcion);
            }

        } catch (Exception e) {

        }
        return tipRet;
    }

    public MtUnidMedidas retornoUnidMedidaPorCodigo(String codigo) {
        MtUnidMedidas tipRet = null;
        try {
            tipRet = (MtUnidMedidas) st.get(MtUnidMedidas.class, codigo);
        } catch (HibernateException e) {
            e.printStackTrace();
        }
        return tipRet;
    }

    private void primero() {
        if (posicion > 0 && ArrayPrimaryKey.size() > 0) {
            posicion = 0;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else {

        }
    }

    private void anterior() {
        if (posicion > 0 && ArrayPrimaryKey.size() > 0) {
            posicion--;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else {

        }
    }

    private void siguiente() {
        if (posicion < ArrayPrimaryKey.size() - 1 && ArrayPrimaryKey.size() > 0) {
            posicion++;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else {

        }
    }

    private void ultimo() {
        if (posicion < ArrayPrimaryKey.size() - 1 && ArrayPrimaryKey.size() > 0) {
            posicion = ArrayPrimaryKey.size() - 1;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else {

        }
    }

    private void buscarRegistros() {
        try {
            String SqlQuery = "select cod_articulo from mt_articulos where es_materia_prima = 'E' ";
            if (origen.equals("Buscar")) {
                if (!this.txtCodProducto.getText().trim().isEmpty()) {
                    SqlQuery = SqlQuery + " and cod_articulo = '" + this.txtCodProducto.getText().trim() + "'";
                }
            }
            SqlQuery = SqlQuery + " order by cod_articulo";
            Query consulta = st.createSQLQuery(SqlQuery);

            ArrayPrimaryKey = consulta.list();

            if (ArrayPrimaryKey.size() > 1) {
                posicion = 0;
                recuperarRegistros(posicion);
                this.btnPrimero.setEnabled(true);
                this.btnAnterior.setEnabled(true);
                this.btnSiguiente.setEnabled(true);
                this.btnUltimo.setEnabled(true);
                this.cmdBorrar.setEnabled(true);
                String mensaje = "Registro " + String.valueOf(posicion + 1).trim()
                        + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
                this.lblInfoPie.setText(mensaje);

            } else if (ArrayPrimaryKey.size() == 1) {
                posicion = 0;
                recuperarRegistros(posicion);
                this.cmdBorrar.setEnabled(true);

                String mensaje = "Registro " + String.valueOf(posicion + 1).trim()
                        + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
                this.lblInfoPie.setText(mensaje);
            } else {
                JOptionPane.showMessageDialog(null, "No existen registros para mostrar.", 
                        "Recetas", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HeadlessException | HibernateException e) {
            e.printStackTrace();
        }
    }

    public void recuperarRegistros(int indice) {
        inicializarCampos();
        String codigo = ArrayPrimaryKey.get(indice).toString();
        cargarCabecera(obtenerProducto(codigo));
    }

    public void cargarCabecera(MtArticulos art) {
        try {
            this.txtCodProducto.setText(art.getCodArticulo());
            this.txtDescripcionProd.setText(art.getNomArticulo());
            this.txtCostoProd.setValue(art.getPrecioCompra());
            this.txtDiasVenc.setText(String.valueOf(art.getCantDiasVenc()));
            this.txtPrecioVenta.setValue(art.getPrecioVenta());
            this.cmbTipoArticulo.setSelectedItem(art.getMtTiposArticulos().getNomTipoArticulo());
            this.cmbUnidadMedidaVenta.setSelectedItem(art.getMtUnidMedidasByUniMedidaVenta().getDescUnidad());
            this.chkFraccionable.setSelected(art.getFraccionable());

            cargarGrilla(obtenerDetalle(art));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al recuperar registros. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Recetas", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void informe() {
        try {
            String codigo = this.txtCodProducto.getText();
            Connection conexion;
            conexion = DriverManager.getConnection("jdbc:postgresql://localhost:5432/karu", "karu", "karu");
            Map parametros = new HashMap();
            //parametros que enviamos al report.
            parametros.put("receta", codigo);
            JasperReport elReporte = (JasperReport) JRLoader.loadObject(ClassLoader.getSystemResource("com/informes/Receta.jasper"));
            JasperPrint imprimir = JasperFillManager.fillReport(elReporte, parametros, conexion);
            JasperViewer visor = new JasperViewer(imprimir, false);
            visor.setTitle("Recetas");
            visor.setVisible(true);
            conexion.close();
        } catch (SQLException | JRException ex) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al ejecutar el reporte de recetas. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Imprimir Recetas", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
}
