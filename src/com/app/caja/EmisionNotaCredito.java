package com.app.caja;

import com.entidades.Caja;
import com.entidades.FacturaVenta;
import com.entidades.FacturaVentaDetalle;
import com.entidades.FacturaVentaDetalleId;
import com.entidades.MtArticulos;
import com.entidades.MtCajeros;
import com.entidades.MtClientes;
import com.entidades.MtComprobantes;
import com.entidades.MtCondicionPago;
import com.entidades.MtFormaPago;
import com.entidades.MtMonedas;
import com.entidades.MtSucursales;
import com.entidades.MtTipoComprobantes;
import com.entidades.MtUsuarios;
import com.entidades.SaPendientes;
import static java.awt.event.KeyEvent.VK_F9;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import util.Fecha;
import util.FormatearNumero;
import util.HibernateUtil;
import util.buscar.BuscarComprobante;

/**
 * @author CArlos Patiño
 */
public class EmisionNotaCredito extends javax.swing.JDialog {

    /**
     * Creates new form Facturacion
     */
    private String usuario;
    private String origen;
    private String formulario;
    private BigInteger masterNrotrans;

    public EmisionNotaCredito(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        hibernateSession();
        this.usuario = "karu";
        this.formulario = this.getClass().getSimpleName();
        valoresDefecto();
        this.txtCodUsuario.setText(this.usuario);
    }

    public EmisionNotaCredito(String user) {
        setLocationRelativeTo(null);
        initComponents();
        hibernateSession();
        this.usuario = user;
        this.formulario = this.getClass().getSimpleName();
        arranque();
        valoresDefecto();
        this.txtCodUsuario.setText(this.usuario);
    }

    private Session st;
    private DefaultTableModel model;
    private MtCajeros masterCajero;
    private FacturaVenta masterFacVta;

    private void hibernateSession() {
        st = HibernateUtil.getSessionFactory().openSession();
    }

    private void arranque() {
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setVisible(true);
        this.cmdCancelar.setEnabled(false);
        tableModel();
    }

    public void tableModel() {
        model = (DefaultTableModel) this.tabArticulos.getModel();
        model.setNumRows(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        txtCodEmpresa1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtNomEmpresa1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabArticulos = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        txtFechaHora = new javax.swing.JTextField();
        txtCodUsuario = new javax.swing.JTextField();
        txtNomUsuario = new javax.swing.JTextField();
        tabPaneCabecera = new javax.swing.JTabbedPane();
        panFactura = new javax.swing.JPanel();
        txtCodCliente = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtNomCliente = new javax.swing.JTextField();
        txtNroPedido = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtCodSuc = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtNomSuc = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtCodCaja = new javax.swing.JTextField();
        txtNomCaja = new javax.swing.JTextField();
        txtNroFactNc = new javax.swing.JTextField();
        txtCodSucFacNc = new javax.swing.JTextField();
        txtCodTribFacNc = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCodTribFac = new javax.swing.JTextField();
        txtCodSucFac = new javax.swing.JTextField();
        txtNroFact = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        panCondPago = new javax.swing.JPanel();
        txtCodCondPago = new javax.swing.JTextField();
        txtDescConPago = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtCodMoneda = new javax.swing.JTextField();
        txtDescMoneda = new javax.swing.JTextField();
        txtVencimiento = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTipoCambio = new javax.swing.JFormattedTextField();
        txtObservacion = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cmdNuevo = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdEditar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        cmdImprimir = new javax.swing.JButton();
        cmdBuscar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtTotalGravadas = new javax.swing.JFormattedTextField();
        txtTotalExentas = new javax.swing.JFormattedTextField();
        txtTotalGral = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtCantArt = new javax.swing.JFormattedTextField();

        jLabel3.setText("jLabel3");

        jRadioButton1.setText("jRadioButton1");

        jLabel21.setText("Empresa");

        txtNomEmpresa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomEmpresa1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Emisión de Nota de Crédito - KARU SGCG v1.0");
        setResizable(false);

        tabArticulos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        tabArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descripción", "Precio Unit.", "Cantidad", "Subtotal", "IVA (%)", "Importe IVA", "Descto. (%)", "Imp. Descto.", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabArticulos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabArticulos.setEnabled(false);
        jScrollPane1.setViewportView(tabArticulos);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtFechaHora.setEditable(false);
        txtFechaHora.setBackground(new java.awt.Color(204, 255, 255));
        txtFechaHora.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtFechaHora.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtCodUsuario.setEditable(false);
        txtCodUsuario.setBackground(new java.awt.Color(204, 255, 255));
        txtCodUsuario.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodUsuarioActionPerformed(evt);
            }
        });

        txtNomUsuario.setEditable(false);
        txtNomUsuario.setBackground(new java.awt.Color(204, 255, 255));
        txtNomUsuario.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNomUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtCodUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtNomUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabPaneCabecera.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        panFactura.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtCodCliente.setBackground(new java.awt.Color(250, 250, 250));
        txtCodCliente.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodClienteActionPerformed(evt);
            }
        });
        txtCodCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodClienteFocusLost(evt);
            }
        });
        txtCodCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodClienteKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodClienteKeyTyped(evt);
            }
        });

        jLabel13.setText("Cliente");

        txtNomCliente.setEditable(false);
        txtNomCliente.setBackground(new java.awt.Color(204, 255, 255));
        txtNomCliente.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        txtNroPedido.setEditable(false);
        txtNroPedido.setBackground(new java.awt.Color(250, 250, 250));
        txtNroPedido.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNroPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNroPedidoActionPerformed(evt);
            }
        });
        txtNroPedido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNroPedidoFocusLost(evt);
            }
        });
        txtNroPedido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNroPedidoKeyTyped(evt);
            }
        });

        jLabel14.setText("Nro. Pedido");

        txtCodSuc.setEditable(false);
        txtCodSuc.setBackground(new java.awt.Color(250, 250, 250));
        txtCodSuc.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodSuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodSucActionPerformed(evt);
            }
        });
        txtCodSuc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodSucFocusLost(evt);
            }
        });

        jLabel20.setText("Sucursal");

        txtNomSuc.setEditable(false);
        txtNomSuc.setBackground(new java.awt.Color(204, 255, 255));
        txtNomSuc.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNomSuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomSucActionPerformed(evt);
            }
        });

        jLabel22.setText("Caja");

        txtCodCaja.setEditable(false);
        txtCodCaja.setBackground(new java.awt.Color(250, 250, 250));
        txtCodCaja.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodCaja.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCajaFocusLost(evt);
            }
        });
        txtCodCaja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodCajaKeyTyped(evt);
            }
        });

        txtNomCaja.setEditable(false);
        txtNomCaja.setBackground(new java.awt.Color(204, 255, 255));
        txtNomCaja.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNomCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCajaActionPerformed(evt);
            }
        });

        txtNroFactNc.setEditable(false);
        txtNroFactNc.setBackground(new java.awt.Color(204, 255, 204));
        txtNroFactNc.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtNroFactNc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNroFactNc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNroFactNcActionPerformed(evt);
            }
        });
        txtNroFactNc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNroFactNcKeyTyped(evt);
            }
        });

        txtCodSucFacNc.setEditable(false);
        txtCodSucFacNc.setBackground(new java.awt.Color(204, 255, 204));
        txtCodSucFacNc.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtCodSucFacNc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodSucFacNc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodSucFacNcKeyTyped(evt);
            }
        });

        txtCodTribFacNc.setEditable(false);
        txtCodTribFacNc.setBackground(new java.awt.Color(204, 255, 204));
        txtCodTribFacNc.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtCodTribFacNc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodTribFacNc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodTribFacNcKeyTyped(evt);
            }
        });

        jLabel10.setText("Nro. Nota de Crédito");

        txtCodTribFac.setBackground(new java.awt.Color(255, 255, 204));
        txtCodTribFac.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtCodTribFac.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodTribFac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodTribFacKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodTribFacKeyPressed(evt);
            }
        });

        txtCodSucFac.setBackground(new java.awt.Color(255, 255, 204));
        txtCodSucFac.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtCodSucFac.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodSucFac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodSucFacKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodSucFacKeyPressed(evt);
            }
        });

        txtNroFact.setBackground(new java.awt.Color(255, 255, 204));
        txtNroFact.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtNroFact.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNroFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNroFactActionPerformed(evt);
            }
        });
        txtNroFact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNroFactFocusLost(evt);
            }
        });
        txtNroFact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNroFactKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNroFactKeyTyped(evt);
            }
        });

        jLabel6.setText("Nro. Comprobante de Venta");

        javax.swing.GroupLayout panFacturaLayout = new javax.swing.GroupLayout(panFactura);
        panFactura.setLayout(panFacturaLayout);
        panFacturaLayout.setHorizontalGroup(
            panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(txtCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(txtNomCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addComponent(txtCodTribFacNc, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtCodSucFacNc, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtNroFactNc, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addComponent(txtCodTribFac, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtCodSucFac, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtNroFact, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(txtCodSuc, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(txtNomSuc, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(txtCodCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(txtNomCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNroPedido)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panFacturaLayout.setVerticalGroup(
            panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panFacturaLayout.createSequentialGroup()
                            .addComponent(jLabel20)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCodSuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNomSuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(panFacturaLayout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtNroPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodTribFacNc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodSucFacNc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNroFactNc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodTribFac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodSucFac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNroFact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNomCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNomCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        tabPaneCabecera.addTab("Datos Factura", panFactura);

        panCondPago.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtCodCondPago.setEditable(false);
        txtCodCondPago.setBackground(new java.awt.Color(250, 250, 250));
        txtCodCondPago.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodCondPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCondPagoFocusLost(evt);
            }
        });

        txtDescConPago.setEditable(false);
        txtDescConPago.setBackground(new java.awt.Color(204, 255, 255));
        txtDescConPago.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtDescConPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescConPagoActionPerformed(evt);
            }
        });

        jLabel7.setText("Condición Pago");

        jLabel12.setText("Moneda");

        txtCodMoneda.setEditable(false);
        txtCodMoneda.setBackground(new java.awt.Color(250, 250, 250));
        txtCodMoneda.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodMoneda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodMonedaActionPerformed(evt);
            }
        });
        txtCodMoneda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodMonedaFocusLost(evt);
            }
        });
        txtCodMoneda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodMonedaKeyTyped(evt);
            }
        });

        txtDescMoneda.setEditable(false);
        txtDescMoneda.setBackground(new java.awt.Color(204, 255, 255));
        txtDescMoneda.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        txtVencimiento.setBackground(new java.awt.Color(250, 250, 250));
        txtVencimiento.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtVencimiento.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel9.setText("Vencimiento");

        jLabel4.setText("Cambio");

        txtTipoCambio.setEditable(false);
        txtTipoCambio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
        txtTipoCambio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTipoCambio.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        txtObservacion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel23.setText("Observaciones");

        javax.swing.GroupLayout panCondPagoLayout = new javax.swing.GroupLayout(panCondPago);
        panCondPago.setLayout(panCondPagoLayout);
        panCondPagoLayout.setHorizontalGroup(
            panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCondPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addComponent(txtCodCondPago, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(txtDescConPago, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panCondPagoLayout.createSequentialGroup()
                                .addComponent(txtCodMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtDescMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTipoCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(26, 26, 26)
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtObservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtVencimiento, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(126, 126, 126))
        );
        panCondPagoLayout.setVerticalGroup(
            panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCondPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodCondPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescConPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtObservacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panCondPagoLayout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCodMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtDescMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(panCondPagoLayout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtTipoCambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        tabPaneCabecera.addTab("Condiciones de Pago", panCondPago);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmdNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/New.png"))); // NOI18N
        cmdNuevo.setToolTipText("Nuevo");
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Save.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar");
        cmdGuardar.setEnabled(false);
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/edit.png"))); // NOI18N
        cmdEditar.setToolTipText("Editar");
        cmdEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Trashcan_empty.png"))); // NOI18N
        cmdBorrar.setToolTipText("Borrar");

        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/cancel32.png"))); // NOI18N
        cmdCancelar.setToolTipText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        cmdImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/imprimir 24.png"))); // NOI18N
        cmdImprimir.setToolTipText("Imprimir");
        cmdImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImprimirActionPerformed(evt);
            }
        });

        cmdBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Search (2).png"))); // NOI18N
        cmdBuscar.setToolTipText("Buscar");
        cmdBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(cmdNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdImprimir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmdBorrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdEditar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTotalGravadas.setEditable(false);
        txtTotalGravadas.setBackground(new java.awt.Color(255, 255, 255));
        txtTotalGravadas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtTotalGravadas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalGravadas.setText("0");

        txtTotalExentas.setEditable(false);
        txtTotalExentas.setBackground(new java.awt.Color(255, 255, 255));
        txtTotalExentas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtTotalExentas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalExentas.setText("0");

        txtTotalGral.setEditable(false);
        txtTotalGral.setBackground(new java.awt.Color(255, 255, 204));
        txtTotalGral.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtTotalGral.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalGral.setText("0");
        txtTotalGral.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtTotalGral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalGralActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Total Gravadas");

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Total Exentas");

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Total");

        jLabel1.setText("Cant. Artículos");

        txtCantArt.setEditable(false);
        txtCantArt.setBackground(new java.awt.Color(255, 255, 255));
        txtCantArt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCantArt.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCantArt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotalExentas, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotalGravadas, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalGral, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtTotalGral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(txtTotalGravadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalExentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel1)
                    .addComponent(txtCantArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabPaneCabecera, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabPaneCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodUsuarioActionPerformed

    private void txtNroFactNcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNroFactNcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNroFactNcActionPerformed

    private void txtCodMonedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodMonedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodMonedaActionPerformed

    private void txtNomEmpresa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomEmpresa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomEmpresa1ActionPerformed

    private void txtNomCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCajaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomCajaActionPerformed

    private void txtNomSucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomSucActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomSucActionPerformed

    private void txtCodSucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodSucActionPerformed
    }//GEN-LAST:event_txtCodSucActionPerformed

    private void txtNroPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNroPedidoActionPerformed
    }//GEN-LAST:event_txtNroPedidoActionPerformed

    private void txtCodClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodClienteKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            buscarComprobante();
        }
    }//GEN-LAST:event_txtCodClienteKeyPressed

    private void txtCodClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodClienteActionPerformed
    }//GEN-LAST:event_txtCodClienteActionPerformed

    private void txtNroFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNroFactActionPerformed
    }//GEN-LAST:event_txtNroFactActionPerformed

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        Fecha fecha = new Fecha();
        habilitarCampos();
        inicializarCampos();
        this.txtFechaHora.setText(fecha.fechaHoraString(fecha.obtenerFechaSistema()));
        obtenerNroDocumento();
        this.origen = "Nuevo";
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        guardar();
        inicializarCampos();
        deshabilitarCampos();
        
        this.txtCantArt.setValue(0);
        this.txtTotalExentas.setValue(0);
        this.txtTotalGravadas.setValue(0);
        this.txtTotalGral.setValue(0);
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        deshabilitarCampos();
        inicializarCampos();
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditarActionPerformed
        habilitarCampos();
    }//GEN-LAST:event_cmdEditarActionPerformed

    private void txtCodClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodClienteFocusLost

    }//GEN-LAST:event_txtCodClienteFocusLost

    private void txtDescConPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescConPagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescConPagoActionPerformed

    private void txtCodCondPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCondPagoFocusLost
        MtCondicionPago cond = new MtCondicionPago();
        if (this.txtCodCondPago.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna condición de pago. ",
                    "Factura Venta", JOptionPane.ERROR_MESSAGE);
            this.txtCodCondPago.grabFocus();
        } else {
            cond = obtenerCondPago(Integer.parseInt(this.txtCodCondPago.getText()));
            //sólo si es a crédito se habilita campo vencimiento
            if (cond != null) {
                if (cond.getPlazo() > 0) {
                    this.txtVencimiento.setEditable(true);
                } else {
                    this.txtVencimiento.setEditable(false);
                }
            }
        }
    }//GEN-LAST:event_txtCodCondPagoFocusLost

    private void txtCodMonedaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodMonedaFocusLost
        MtMonedas mon = new MtMonedas();
        if (this.txtCodMoneda.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna moneda. ",
                    "Factura Venta", JOptionPane.ERROR_MESSAGE);
            this.txtCodMoneda.grabFocus();
        } else {
            mon = obtenerMoneda(Integer.parseInt(this.txtCodMoneda.getText()));
                if (this.txtCodMoneda.getText().equals("1")) {
                this.txtTipoCambio.setValue(1);
                this.txtTipoCambio.setEnabled(false);
            } else {
                this.txtTipoCambio.setValue(0);
                this.txtTipoCambio.setEnabled(true);
                this.txtTipoCambio.setEditable(true);
            }
        }
    }//GEN-LAST:event_txtCodMonedaFocusLost

    private void txtTotalGralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalGralActionPerformed
    }//GEN-LAST:event_txtTotalGralActionPerformed

    private void txtNroPedidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNroPedidoFocusLost
    }//GEN-LAST:event_txtNroPedidoFocusLost

    private void txtCodTribFacNcKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodTribFacNcKeyTyped
        char car = evt.getKeyChar();
        if (txtCodTribFacNc.getText().length() >= 3) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodTribFacNcKeyTyped

    private void txtCodSucFacNcKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodSucFacNcKeyTyped
        char car = evt.getKeyChar();
        if (txtCodSucFacNc.getText().length() >= 3) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodSucFacNcKeyTyped

    private void txtNroFactNcKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroFactNcKeyTyped
        char car = evt.getKeyChar();
        if (txtNroFactNc.getText().length() >= 7) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNroFactNcKeyTyped

    private void txtCodMonedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodMonedaKeyTyped
        char car = evt.getKeyChar();
        if (txtCodMoneda.getText().length() >= 2) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodMonedaKeyTyped

    private void txtNroPedidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroPedidoKeyTyped
        char car = evt.getKeyChar();
        if (txtNroPedido.getText().length() >= 10) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNroPedidoKeyTyped

    private void txtCodCajaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodCajaKeyTyped

    }//GEN-LAST:event_txtCodCajaKeyTyped

    private void txtCodCajaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCajaFocusLost
        try {
            Caja caja = null;
            txtCodCaja.setText(txtCodCaja.getText().toUpperCase());
            caja = obtenerCaja(txtCodCaja.getText());
            this.txtNomCaja.setText(caja.getNomCaja());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al obtener descripción de la caja. ",
                    "Factura Venta", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtCodCajaFocusLost

    private void txtCodSucFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodSucFocusLost
        obtenerSucursal(txtCodSuc.getText().toUpperCase());
    }//GEN-LAST:event_txtCodSucFocusLost

    private void txtNomUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomUsuarioActionPerformed
    }//GEN-LAST:event_txtNomUsuarioActionPerformed

    private void cmdImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImprimirActionPerformed
       imprimir();
    }//GEN-LAST:event_cmdImprimirActionPerformed

    private void cmdBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarActionPerformed
    }//GEN-LAST:event_cmdBuscarActionPerformed

    private void txtCodClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodClienteKeyTyped
    
    }//GEN-LAST:event_txtCodClienteKeyTyped

    private void txtNroFactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNroFactFocusLost

        if (this.txtCodTribFac.getText().equals("") || this.txtCodSucFac.getText().equals("")
                || this.txtNroFact.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "El número de factura no es válida."
                    + "\n" + "Verificar todos los campos. ",
                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            this.txtCodTribFac.grabFocus();
            this.cmdGuardar.setEnabled(false);
        } else {
            buscarFacturaVenta();
            this.cmdGuardar.setEnabled(true);
        }
    }//GEN-LAST:event_txtNroFactFocusLost

    private void txtCodTribFacKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodTribFacKeyTyped
        char car = evt.getKeyChar();
        if (txtCodTribFac.getText().length() >= 3) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodTribFacKeyTyped

    private void txtCodSucFacKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodSucFacKeyTyped
        char car = evt.getKeyChar();
        if (txtCodSucFac.getText().length() >= 3) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodSucFacKeyTyped

    private void txtNroFactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroFactKeyTyped
        char car = evt.getKeyChar();
        if (txtNroFact.getText().length() >= 3) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNroFactKeyTyped

    private void txtNroFactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroFactKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            buscarComprobante();
        }
    }//GEN-LAST:event_txtNroFactKeyPressed

    private void txtCodTribFacKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodTribFacKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            buscarComprobante();
        }
    }//GEN-LAST:event_txtCodTribFacKeyPressed

    private void txtCodSucFacKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodSucFacKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            buscarComprobante();
        }
    }//GEN-LAST:event_txtCodSucFacKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmisionNotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmisionNotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmisionNotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmisionNotaCredito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EmisionNotaCredito dialog = new EmisionNotaCredito(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdBuscar;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdEditar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdImprimir;
    private javax.swing.JButton cmdNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panCondPago;
    private javax.swing.JPanel panFactura;
    private javax.swing.JTable tabArticulos;
    private javax.swing.JTabbedPane tabPaneCabecera;
    private javax.swing.JFormattedTextField txtCantArt;
    private javax.swing.JTextField txtCodCaja;
    private javax.swing.JTextField txtCodCliente;
    private javax.swing.JTextField txtCodCondPago;
    private javax.swing.JTextField txtCodEmpresa1;
    private javax.swing.JTextField txtCodMoneda;
    private javax.swing.JTextField txtCodSuc;
    private javax.swing.JTextField txtCodSucFac;
    private javax.swing.JTextField txtCodSucFacNc;
    private javax.swing.JTextField txtCodTribFac;
    private javax.swing.JTextField txtCodTribFacNc;
    private javax.swing.JTextField txtCodUsuario;
    private javax.swing.JTextField txtDescConPago;
    private javax.swing.JTextField txtDescMoneda;
    private javax.swing.JTextField txtFechaHora;
    private javax.swing.JTextField txtNomCaja;
    private javax.swing.JTextField txtNomCliente;
    private javax.swing.JTextField txtNomEmpresa1;
    private javax.swing.JTextField txtNomSuc;
    private javax.swing.JTextField txtNomUsuario;
    private javax.swing.JTextField txtNroFact;
    private javax.swing.JTextField txtNroFactNc;
    private javax.swing.JTextField txtNroPedido;
    private javax.swing.JTextField txtObservacion;
    private javax.swing.JFormattedTextField txtTipoCambio;
    private javax.swing.JFormattedTextField txtTotalExentas;
    private javax.swing.JFormattedTextField txtTotalGral;
    private javax.swing.JFormattedTextField txtTotalGravadas;
    private javax.swing.JTextField txtVencimiento;
    // End of variables declaration//GEN-END:variables

    public void inicializarCampos() {
        this.txtFechaHora.setText("");
        this.txtCodCliente.setText("");
        this.txtNomCliente.setText("");
        this.txtNroPedido.setText("");
        this.txtCodTribFac.setText("");
        this.txtCodSucFac.setText("");
        this.txtNroFact.setText("");
        this.txtCodTribFacNc.setText("");
        this.txtCodSucFacNc.setText("");
        this.txtNroFactNc.setText("");
        this.txtVencimiento.setText("");
        this.txtObservacion.setText("");
        this.txtCantArt.setValue(0);

        tableModel();
    }

    private void habilitarCampos() {
        this.cmdGuardar.setEnabled(true);
        this.cmdCancelar.setEnabled(true);
        this.cmdBorrar.setEnabled(false);
        this.cmdNuevo.setEnabled(false);
        this.cmdEditar.setEnabled(false);
        
        this.tabArticulos.setEnabled(true);
    }

    private void deshabilitarCampos() {
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setEnabled(false);
        this.cmdBorrar.setEnabled(true);
        this.cmdNuevo.setEnabled(true);
        this.cmdEditar.setEnabled(true);
        
        this.tabArticulos.setEnabled(false);
    }

    public MtClientes buscarCliente(String codigo) {
        MtClientes cliente = null;
        try {
            Query query = st.createQuery("From MtClientes c Where c.nroDocum = ? and c.esActivo = 'S'");
            query.setParameter(0, codigo);
            cliente = (MtClientes) query.uniqueResult();
        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Existen varios clientes con el mismo codigo. Busque con el asistente.",
                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return cliente;
    }

    private void valoresDefecto() {
        Caja caja = null;
        obtenerCajero(this.usuario);
        
        this.txtCodUsuario.setText(this.usuario);
        obtenerUsuario(this.usuario);
        
        revisar obtener cajero, el problema al recuperar cajero  
        this.txtCodCaja.setText(masterCajero.getCaja().getCodCaja());
        this.txtNomCaja.setText(masterCajero.getCaja().getNomCaja());
        //caja = obtenerCaja(masterCajero.getCodCaja());
        caja = masterCajero.getCaja();
        this.txtCodSuc.setText(masterCajero.getMtSucursales().getCodSucursal());
        this.txtNomSuc.setText(masterCajero.getMtSucursales().getNomSucursal());
        //obtenerSucursal(masterCajero.getCodSucursal());

        this.txtCodCondPago.setText("1");
        obtenerCondPago(1);
        
        this.txtCodMoneda.setText("1");
        obtenerMoneda(1);  
    }

    //obtiene descripción de tipo de comprobante.
    public MtTipoComprobantes obtenerTipoComprobante(String cod) {
        MtTipoComprobantes comp = null;
        try {
            comp = (MtTipoComprobantes) st.get(MtTipoComprobantes.class, cod);
            if (comp == null) {
                JOptionPane.showMessageDialog(null, "Código buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                //this.txtDescTipComp.setText(comp.getDescripcion());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " 
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return comp;
    }

    //obtiene descripción de condición de pago.
    public MtCondicionPago obtenerCondPago(int cod) {
        MtCondicionPago cond = null;
        try {
            cond = (MtCondicionPago) st.get(MtCondicionPago.class, cod);
            if (cond == null) {
                JOptionPane.showMessageDialog(null, "Código buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtDescConPago.setText(cond.getDescripcion());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return cond;
    }

    //obtiene descripción de moneda.
    public MtMonedas obtenerMoneda(int cod) {
        MtMonedas mon = null;
        try {
            mon = (MtMonedas) st.get(MtMonedas.class, cod);
            if (mon == null) {
                JOptionPane.showMessageDialog(null, "Código buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtDescMoneda.setText(mon.getNomMoneda());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " 
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return mon;
    }

    //obtiene descripcion de la forma de pago.
    public MtFormaPago obtenerFormaPago(int cod) {
        MtFormaPago comp = null;
        try {
            comp = (MtFormaPago) st.get(MtFormaPago.class, cod);
            if (comp == null) {
                JOptionPane.showMessageDialog(null, "Código buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                //this.txtDescFormaPago.setText(comp.getDescripcion());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " 
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return comp;
    }

    //retorna la caja asignada.
    public Caja obtenerCaja(String cod) {
        Caja caja = null;
        try {
            caja = (Caja) st.get(Caja.class, cod);
            if (caja == null) {
                JOptionPane.showMessageDialog(null, "Código de caja buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomCaja.setText(caja.getNomCaja());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " 
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return caja;
    }

    //retorna la sucursal
    public void obtenerSucursal(String cod) {
        try {
            MtSucursales suc = (MtSucursales) st.get(MtSucursales.class, cod);
            if (suc == null) {
                JOptionPane.showMessageDialog(null, "Código de sucursal buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomSuc.setText(suc.getNomSucursal());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " 
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void obtenerUsuario(String cod) {
        try {
            MtUsuarios user = (MtUsuarios) st.get(MtUsuarios.class, cod);
            if (user == null) {
                JOptionPane.showMessageDialog(null, "Código de usuario buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomUsuario.setText(user.getNomUsuario());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " 
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
    }

    //obtiene el datos del cajero
    public void obtenerCajero(String cajero) {
        MtCajeros caj = null;
        try {
            Query query = st.createQuery("From MtCajeros c Where c.codUsuario = ? and c.activo = 'S'");
            query.setParameter(0, cajero);
            try {
                caj = (MtCajeros) query.uniqueResult();
                this.masterCajero = caj;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cajero activo para varias cajas." + e.getMessage(),
                        "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al recuperar registros del Cajero." 
                    + "\n" + ex.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
    }

    //obtiene el nro de comprobante asignado a la caja y que se encuentre activo.
    public void obtenerNroDocumento() {
        MtComprobantes comp = null;
        try {
            Query query = st.createQuery("From MtComprobantes c Where c.codSucursal = ? "
                    + " and c.codCaja = ? and c.tipoDocum = 'NC' and c.esActivo = true");
            query.setParameter(0, this.txtCodSuc.getText());
            query.setParameter(1, this.txtCodCaja.getText());
            try {
                comp = (MtComprobantes) query.uniqueResult();
                //en caso que no esté asignado un comprobante con la caja.
                if (comp == null) {
                    JOptionPane.showMessageDialog(null, "No se encuentra comprobante asignado a esta caja.",
                            "Emisión de Nota de Crédito", JOptionPane.INFORMATION_MESSAGE);
                    this.txtCodTribFacNc.setText("");
                    this.txtCodSucFacNc.setText("");
                    this.txtNroFactNc.setText("");
                    this.cmdGuardar.setEnabled(false);
                } else {
                    //valida vencimiento del comprobante. Solo FT y NC tienen Timbrado y Vencimiento
                    if (comp.getTipoDocum().equals("NC")) {
                        Fecha f = new Fecha();
                        if (f.obtenerFechaSistema().before(comp.getVencimiento())) {
                            this.txtCodTribFacNc.setText(comp.getCodTribut());
                            this.txtCodSucFacNc.setText(comp.getCodSucFac());
                            this.txtNroFactNc.setText((comp.getNroFactura()).toString());
                            this.cmdGuardar.setEnabled(true);
                        } else {
                            //en caso que haya vencido desplegar mensaje.
                            JOptionPane.showMessageDialog(null, "El Timbrado asignado al tipo comprobante está vencido."
                                     + "\n" + "Asigne nuevo lote a la caja.",
                                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
                            this.txtCodTribFacNc.setText("");
                            this.txtCodSucFacNc.setText("");
                            this.txtNroFactNc.setText("");
                            this.cmdGuardar.setEnabled(false);
                        }
                    } else {
                        this.cmdGuardar.setEnabled(true);
                        this.txtCodTribFacNc.setText(comp.getCodTribut());
                        this.txtCodSucFacNc.setText(comp.getCodSucFac());
                        this.txtNroFactNc.setText((comp.getNroFactura()).toString());
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cajero activo para varias cajas. " 
                        + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al recupera registros del Cajero. " 
                    + "\n" + ex.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
    }

    //obtiene los datos del articulo a partir del código.
    public MtArticulos obtenerArticulo(String cod) {
        MtArticulos art = null;
        try {
            art = (MtArticulos) st.get(MtArticulos.class, cod);
            if (art == null) {
                JOptionPane.showMessageDialog(null, "Código del artículo buscado no existe.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            } 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " 
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return art;
    }

    //agrega los datos del artículo en la grilla de artículos
    private void cargarArticulo(MtArticulos articulo, BigDecimal subtotal, BigDecimal impDesc,
                                BigDecimal cantPedida, String descto) {
        BigDecimal impuesto = calcularImpuesto(subtotal, articulo.getImpuesto());
        BigDecimal total = subtotal.subtract(impDesc);

        try {
            model.addRow(new Object[]{
                articulo.getCodArticulo(), articulo.getNomArticulo(), articulo.getPrecioVenta(),
                /*this.txtCantPedida.getValue()*/ cantPedida, subtotal, articulo.getImpuesto(),
                impuesto, /*this.txtDescto.getText()*/ descto, impDesc, total});
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al agregar artículo." 
                    + "\n" + ex.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        actualizarTotales();
        this.txtCantArt.setValue(model.getRowCount());
    }

    //calcular el importe del impuesto según el porcentaje de este
    private BigDecimal calcularImpuesto(BigDecimal valor, int impuesto) {
        FormatearNumero vConvertidor = new FormatearNumero();
        BigDecimal monto = BigDecimal.ZERO;
        BigDecimal factor = new BigDecimal(impuesto);
        factor = factor.divide(vConvertidor.toDecimal("100"));

        try {
            monto = valor.multiply(factor);
            
            if (this.txtCodMoneda.getText().equals("1")) {
                monto = monto.setScale(0, BigDecimal.ROUND_HALF_UP);
            } else {
                monto = monto.setScale(2, BigDecimal.ROUND_HALF_UP);
            }
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al calcular valor de impuesto." 
                    + "\n" + ex.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return monto;
    }

   /* //calcular el monto de descuento otorgado según el porcentaje de este
    private BigDecimal calcularDescuento(Object porc, Object importe) {
        FormatearNumero vConvertidor = new FormatearNumero();
        BigDecimal monto = BigDecimal.ZERO;
        BigDecimal valor = BigDecimal.ZERO;//importe
        BigDecimal descto = BigDecimal.ZERO;//porcentaje del descuento
        BigDecimal cien = new BigDecimal("100");// convertir int(100) a BigDecimal(100)

        valor = vConvertidor.toDecimal(importe.toString());
        descto = vConvertidor.toDecimal(porc.toString());
        BigDecimal factor = descto.divide(cien);

        try {
            monto = valor.multiply(factor);

            if (this.txtCodMoneda.getText().equals("1")) {
                monto = monto.setScale(0, BigDecimal.ROUND_HALF_UP);
            } else {
                monto = monto.setScale(2, BigDecimal.ROUND_HALF_UP);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al calcular valor del descuento."
                    + "\n" + ex.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return monto;
    }*/

    private void actualizarTotales() {
        //FormatearNumero vConvertidor = new FormatearNumero();
        BigDecimal totalGral = BigDecimal.ZERO;
        BigDecimal totalGravadas = BigDecimal.ZERO;
        BigDecimal totalExenta = BigDecimal.ZERO;
        BigDecimal importe = BigDecimal.ZERO;
        int impuesto = 0;
        int cantArt = model.getRowCount();

        try {
            if (cantArt > 0) {
                for (int i = 0; i < cantArt; i++) {
                    impuesto = Integer.parseInt(model.getValueAt(i, 5).toString());
                    importe = new BigDecimal(model.getValueAt(i, 9).toString());
                    if (impuesto > 0) {
                        totalGravadas = totalGravadas.add(importe);
                    } else {
                        totalExenta = totalExenta.add(importe);
                    }
                    totalGral = totalGral.add(importe);
                }
            } else {
                totalGravadas = BigDecimal.ZERO;
                totalExenta = BigDecimal.ZERO;
                totalGral = BigDecimal.ZERO;
            }

            this.txtTotalExentas.setValue(totalExenta);
            this.txtTotalGravadas.setValue(totalGravadas);
            this.txtTotalGral.setValue(totalGral);
            this.txtCantArt.setValue(model.getRowCount());

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al actualizar totales."
                    + "\n" + e.getMessage(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            //e.printStackTrace();
        }
    }

    private void guardar() {
        int cant = model.getRowCount();

        if (cant == 0) {
            JOptionPane.showMessageDialog(null, "No hay artículos en la lista. No se puede guardar.",
                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        } else {
            try {

                guardarCabecera();
                arranque();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al guardar registro. " + "\n" + ex.getMessage(),
                        "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

   //persiste en la BD los datos de la factura_cabecera
    private void guardarCabecera() {
        MtTipoComprobantes tcomp = new MtTipoComprobantes();

        Date fecha = new Date();
        Fecha fec = new Fecha();
        FormatearNumero conv = new FormatearNumero();
        masterNrotrans = obtenerNroTrans();

        try {            
            tcomp = obtenerTipoComprobante("NC");

            FacturaVenta facVen = new FacturaVenta();

            facVen.setNroTrans(masterNrotrans.intValue());
            facVen.setFecha(fec.fechaHoraDate(this.txtFechaHora.getText()));
            facVen.setTotalGravada(masterFacVta.getTotalGravada());
            facVen.setTotalExenta(masterFacVta.getTotalExenta());
            //omiti los montos del iva 5% y 10% ya que no discrimine
            facVen.setNroComanda(masterFacVta.getNroComanda());
            facVen.setCodSucFac(this.txtCodSucFacNc.getText());
            facVen.setCodTributFac(this.txtCodTribFacNc.getText());
            facVen.setNroDocum(Integer.parseInt(this.txtNroFactNc.getText()));
            facVen.setMtClientes(masterFacVta.getMtClientes());
            facVen.setCaja(masterFacVta.getCaja());
            facVen.setCodSucFac(this.txtCodSuc.getText());
            facVen.setMtTipoComprobantes(tcomp);
            facVen.setMtCondicionPago(masterFacVta.getMtCondicionPago());
            facVen.setEstado('P');
           //formatear fecha vencimiento en caso de comprobantes a credito
            if (this.txtVencimiento.getText().equals("")) {
                facVen.setVencimiento(null);
            } else {
                facVen.setVencimiento(fec.fechaDate(this.txtVencimiento.getText()));
            }
            facVen.setMtMonedas(masterFacVta.getMtMonedas());
            facVen.setTipoCambio(masterFacVta.getTipoCambio());
            //facVen.setMtFormaPago(masterFacVta.getMtFormaPago());
            facVen.setNotaCredito(this.txtCodSucFac.getText() + "-" + this.txtCodTribFac.getText()
                    + "-" + this.txtNroFact.getText());
            facVen.setObservacion(masterFacVta.getObservacion());
            facVen.setAccionMod("Nuevo");
            facVen.setUsuarioMod(this.usuario);
            facVen.setFechaMod(fecha);      
           
            // guarda el detalle de los articulos de la nota de crédito
            if (guardarDetalle()) {
                guardarPendiente(facVen);
                actualizarNroComprobante();

                st.beginTransaction();
                st.save(facVen);
                st.getTransaction().commit();
            } else {
                st.beginTransaction().rollback();
            }

        } catch (Exception ex) {
            st.beginTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al guardar registro de la FacturaCab. "  
                    + "\n" + ex.getMessage() + "\n" + ex.getCause()
                    , "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        
        model.setNumRows(0);
        deshabilitarCampos();
    }

    //guarda datos del detalle de la factura
    private boolean guardarDetalle() {
        FormatearNumero conv = new FormatearNumero();
        Date fecha = new Date();
        boolean resp = true;
        int cantArt = model.getRowCount();
        
        try { 
            for (int i = 0; i < cantArt; i++) {
                st.beginTransaction();
               
                MtArticulos art = new MtArticulos();
                FacturaVentaDetalle facDet = new FacturaVentaDetalle();
                FacturaVentaDetalleId facDetId = new FacturaVentaDetalleId();
                BigDecimal precioUnit = new BigDecimal(model.getValueAt(i, 2).toString());
                BigDecimal cantidad = new BigDecimal(model.getValueAt(i, 3).toString());
                 
                art = obtenerArticulo(model.getValueAt(i, 0).toString());
                        
                facDetId.setNroTrans(masterNrotrans.intValue());
                facDetId.setLinea(i+1);
                facDet.setId(facDetId);
                facDet.setMtArticulos(art);
                facDet.setCantidad(cantidad);
                facDet.setPrecioUnitaio(precioUnit);
                facDet.setSubtotal(new BigDecimal(model.getValueAt(i, 4).toString()));
                facDet.setPorcIva(Integer.parseInt(model.getValueAt(i, 5).toString()));
                facDet.setImporteIva(new BigDecimal(model.getValueAt(i, 6).toString()));
                facDet.setPorcDto(conv.toDecimal(model.getValueAt(i, 7).toString()));
                facDet.setImpDescuento(conv.toDecimal(model.getValueAt(i, 8).toString()));
                facDet.setTotal(new BigDecimal(model.getValueAt(i, 9).toString()));
                facDet.setAccionMod("Nuevo");
                facDet.setUsuarioMod(this.usuario);
                facDet.setFechaMod(fecha);
                st.save(facDet);
            }
                resp = true;
                
        } catch (Exception e) {
            st.beginTransaction().rollback();
            resp = false;
            JOptionPane.showMessageDialog(null, "Ocurrió un error al guardar detalle de la factura. "
                   + "\n" +  e.getMessage() + "\n" + e.getCause(),
                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return resp;
    }

     //guarda el saldo crédito en la tabala pendientes para su posterior cobro
    public void guardarPendiente(FacturaVenta facVen){
        SaPendientes pend = new SaPendientes();
        Date fecha = new Date();
      
        try {
            st.beginTransaction();

            pend.setNroTrans(facVen.getNroTrans());
            pend.setCodDocum(facVen.getMtTipoComprobantes().getCodComp());
            pend.setCodTit(facVen.getMtClientes().getCodTit());
            pend.setCodSucFac(facVen.getCodSucFac());
            pend.setCodTributFac(facVen.getCodTributFac());
            pend.setNroDocum(facVen.getNroDocum()); 
            pend.setFecDoc(facVen.getFecha());
            pend.setVencimiento(facVen.getVencimiento());
            pend.setCodMoneda(facVen.getMtMonedas().getCodMoneda());
            pend.setImporteOrigen(facVen.getTotalGravada().add(facVen.getTotalExenta()));
            pend.setSaldo(facVen.getTotalGravada().add(facVen.getTotalExenta()));
            pend.setAccionMod("Nuevo");
            pend.setUsuarioMod(this.usuario);
            pend.setFechaMod(fecha);
            
            st.save(pend);

        } catch (Exception ex) {
            st.beginTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al guardar registro en sa_pendientes. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(), "Facturación", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    //obtiene el nro_trans correspondiente a la transacción.
    private BigInteger obtenerNroTrans() {
        BigInteger nroTrans = BigInteger.ZERO;
        
        try {
            Query query = st.createSQLQuery("SELECT NEXTVAL('factura_venta_nro_factura_seq')");
            nroTrans = (BigInteger) query.uniqueResult();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al generar nro. de transacción. " 
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
        return nroTrans;
    }

    //actualiza el nro de comprobantes.
    public void actualizarNroComprobante() {
        MtComprobantes comp = new MtComprobantes();
        //String tipoDocum = "NC";
        String caja = this.txtCodCaja.getText();
        String codSucFac = this.txtCodSucFacNc.getText();
        String codTributFac = this.txtCodTribFacNc.getText();
        String codSuc = this.txtCodSuc.getText();
        int actual = 0;

        try {
            Query query = st.createQuery("From MtComprobantes c Where c.tipoDocum = 'NC' "
                    + " and c.codTribut = ? and c.codSucFac = ? and c.codCaja = ? "
                    + " and c.codSucursal = ? and c.esActivo = true");
            query.setParameter(0, codTributFac);
            query.setParameter(1, codSucFac);
            query.setParameter(2, caja);
            query.setParameter(3, codSuc);

            comp = (MtComprobantes) query.uniqueResult();

            if (comp == null) {

            } else {
                actual = comp.getNroFactura();
                comp.setNroFactura(actual + 1);

                try {
                    st.beginTransaction();
                    st.update(comp);
                    st.beginTransaction().commit();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el nro. de comprobante. "
                            + "\n" + ex.getMessage() + "\n" + ex.getCause(), "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el nro. de comprobante. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
        }
    }

    //realiza buscaqueda de comprobante mediante el formulario de búsqeda.
    public void buscarComprobante() {
        try {
            BuscarComprobante formBusqueda = new BuscarComprobante(this, true, "FT", 'A');
            formBusqueda.setDefaultCloseOperation(HIDE_ON_CLOSE);
            formBusqueda.setVisible(true);
            int codigo = Integer.parseInt(formBusqueda.getCodigoRetorno());
            
            if(codigo > 0){
                buscarFacturaVenta(codigo);
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en el formulario padre. " + "\n"
                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //buscar el comprobante por los parametros ingresados en los campos.
    // de comprobante
    private void buscarFacturaVenta(){
        String tribut = this.txtCodTribFac.getText();
        String suc = this.txtCodSucFac.getText();
        int nroDocum = Integer.parseInt(this.txtNroFact.getText());
        
        MtTipoComprobantes comp = obtenerTipoComprobante("FT");
        FacturaVenta fac = new FacturaVenta();
        
        try{          
            Query query = st.createQuery("From FacturaVenta fv " +
                    " where fv.codTributFac = ? and fv.codSucFac = ? " +
                    " and fv.nroDocum = ? and fv.estado <> 'A' and fv.mtTipoComprobantes = ?");
            
            query.setParameter(0, tribut);
            query.setParameter(1, suc);
            query.setParameter(2, nroDocum);
            query.setParameter(3, comp);

            fac = (FacturaVenta) query.uniqueResult();

            if (fac == null) {
                JOptionPane.showMessageDialog(null, "No se ha encontrado comprobante. " 
                        + "\n" + "Verifique número de comprobante o que no esté anulado.",
                        "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            } else {
                cargarCabecera(fac);
            }
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al buscar número de factura de venta. ",
                    "Emisión de Nota de Crédito", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    //busca el comprobante por el nro_trans.
    private void buscarFacturaVenta (int nroTrans){
        try{ 
            FacturaVenta venta = (FacturaVenta) st.load(FacturaVenta.class, nroTrans);  
            cargarCabecera(venta);
            
        } catch(Exception ex){
            this.txtCodSucFac.grabFocus();
            JOptionPane.showMessageDialog(null, "Ocurrio un error al recuperar comprobante. "
                    + "\n" + ex.getMessage()+ "\n" + ex.getCause(),
                    "Emisión Nota de Crédito", JOptionPane.ERROR_MESSAGE); 
            ex.printStackTrace();
        }
    }
    
    //carga el detalle de la cabecera del comprobante de venta.
    public void cargarCabecera(FacturaVenta fac) {
        Fecha fec = new Fecha();
        masterFacVta = new FacturaVenta();
        masterFacVta = fac;

        this.txtCodTribFac.setText(fac.getCodTributFac());
        this.txtCodSucFac.setText(fac.getCodSucFac());
        this.txtNroFact.setText(fac.getNroDocum().toString());
        
        this.txtNroPedido.setText(fac.getNroComanda().toString());
        this.txtCodCliente.setText(fac.getMtClientes().getNroDocum());
        this.txtNomCliente.setText(fac.getMtClientes().getNomTit());
        this.txtCodCondPago.setText(String.valueOf(fac.getMtCondicionPago().getCodCond()));
        this.txtDescConPago.setText(fac.getMtCondicionPago().getDescripcion());
       // this.txtCodFormPago.setText(String.valueOf(fac.getMtFormaPago().getCodTipo()));
       //this.txtDescFormaPago.setText(fac.getMtFormaPago().getDescripcion());
        this.txtCodMoneda.setText(String.valueOf(fac.getMtMonedas().getCodMoneda()));
        this.txtDescMoneda.setText(fac.getMtMonedas().getNomMoneda());
        this.txtTipoCambio.setValue(fac.getTipoCambio());
        this.txtVencimiento.setText(fec.fechaString(fac.getVencimiento()));
        this.txtObservacion.setText(fac.getObservacion());

        cargarDetalle(fac);
    }

    //carga el detalle de los articulos del comprobante de venta.
    public void cargarDetalle(FacturaVenta fac) {
        try {
             Query query = st.createQuery("from FacturaVentaDetalle d join d.id i"
             + " where i.nroTrans = ?");
             query.setParameter(0, fac.getNroTrans());
             
            System.out.println("Consulta...." + query.getQueryString());
            
            List<FacturaVentaDetalle> lista = (List<FacturaVentaDetalle>) query.list();
            for (FacturaVentaDetalle det : lista) {
                model.addRow(new Object[]{
                    det.getMtArticulos().getCodArticulo(),
                    det.getMtArticulos().getNomArticulo(),
                    det.getMtArticulos().getPrecioVenta(),
                    det.getCantidad(),
                    det.getSubtotal(),
                    det.getMtArticulos().getImpuesto(),
                    det.getImporteIva(),
                    det.getPorcDto(),
                    det.getImpDescuento(),
                    det.getTotal()});
            }

            actualizarTotales();
            this.txtCantArt.setValue(model.getRowCount());

        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al cargar la grilla. " + ex.getMessage(),
                    "Mantenimiento de Áreas", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //imprime comprobante de Nota de Crédito generado.
    private void imprimir() {

    }
}
