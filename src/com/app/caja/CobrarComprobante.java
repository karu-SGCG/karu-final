package com.app.caja;

import com.app.caja.controladores.ActualizarNC;
import com.app.caja.controladores.ControlArqueo;
import com.entidades.ArqueoCab;
import com.entidades.Caja;
import com.entidades.Cobranza;
import com.entidades.CobranzaDet;
import com.entidades.CobranzaDetId;
import com.entidades.MtBancos;
import com.entidades.MtCajeros;
import com.entidades.MtClientes;
import com.entidades.MtComprobantes;
import com.entidades.MtFormaPago;
import com.entidades.MtMonedas;
import com.entidades.MtProcTarjetas;
import com.entidades.MtSucursales;
import com.entidades.MtTipoComprobantes;
import com.entidades.MtUsuarios;
import com.entidades.SaPendientes;
import com.entidades.ValoresDet;
import com.entidades.ValoresDetId;
import static java.awt.event.KeyEvent.VK_ENTER;
import static java.awt.event.KeyEvent.VK_F9;
import static java.awt.event.KeyEvent.VK_TAB;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import util.Busqueda;
import util.Fecha;
import util.FormatearNumero;
import util.HibernateUtil;
import util.buscar.BuscarComprobante;

/**
 * @author CArlos Patiño
 */
public class CobrarComprobante extends javax.swing.JDialog {

    /**
     * Creates new form Facturacion
     */
    private String usuario;
    private String origen;
    private String formulario;
    private BigInteger masterNrotrans;
    private BigDecimal saldoNc;
    private boolean estadoArqueo;

    public CobrarComprobante(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        hibernateSession();
        this.usuario = "karu";
        this.formulario = this.getClass().getSimpleName();
        valoresDefecto();
        habilitacionCaja();
        this.txtCodUsuario.setText(this.usuario);
    }

    public CobrarComprobante(String user) {
        setLocationRelativeTo(null);
        initComponents();
        hibernateSession();
        this.usuario = user;
        this.formulario = this.getClass().getSimpleName();
        arranque();
        valoresDefecto();
        habilitacionCaja();
        this.txtCodUsuario.setText(this.usuario);
    }

    private Session st;
    private DefaultTableModel model;
    private DefaultTableModel modelVal;
    private MtCajeros masterCajero;
    private SaPendientes superFactura;

    private void hibernateSession() {
        st = HibernateUtil.getSessionFactory().openSession();
    }

    private void arranque() {
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setVisible(true);
        this.cmdCancelar.setEnabled(false);
        tableModel();
        tableModelVal();
    }

    public void tableModel() {
        model = (DefaultTableModel) this.tabComprobantes.getModel();
        model.setNumRows(0);
    }

    public void tableModelVal() {
        modelVal = (DefaultTableModel) this.tabValores.getModel();
        modelVal.setNumRows(0);

        tabValores.getColumnModel().getColumn(10).setMaxWidth(0);
        tabValores.getColumnModel().getColumn(10).setMinWidth(0);
        tabValores.getColumnModel().getColumn(10).setPreferredWidth(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        txtCodEmpresa1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtNomEmpresa1 = new javax.swing.JTextField();
        panArticulo = new javax.swing.JPanel();
        cmdQuitar = new javax.swing.JButton();
        cmdAgregar = new javax.swing.JButton();
        txtCodTribFac = new javax.swing.JTextField();
        txtCodSucFac = new javax.swing.JTextField();
        txtNroFactura = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtImpPendiente = new javax.swing.JFormattedTextField();
        txtImpCancelar = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabComprobantes = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        txtFechaHora = new javax.swing.JTextField();
        txtCodUsuario = new javax.swing.JTextField();
        txtNomUsuario = new javax.swing.JTextField();
        tabPaneCabecera = new javax.swing.JTabbedPane();
        panFactura = new javax.swing.JPanel();
        txtCodTipoComp = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDescTipComp = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCodTribRe = new javax.swing.JTextField();
        txtCodSucRe = new javax.swing.JTextField();
        txtNroRecibo = new javax.swing.JTextField();
        txtCodCliente = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtNomCliente = new javax.swing.JTextField();
        txtCodSuc = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtNomSuc = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtCodCaja = new javax.swing.JTextField();
        txtNomCaja = new javax.swing.JTextField();
        panCondPago = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabValores = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        txtPendiente = new javax.swing.JFormattedTextField();
        cmdQuitarValor = new javax.swing.JButton();
        cmdAgregarValor = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cmdNuevo = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdEditar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        cmdImprimir = new javax.swing.JButton();
        cmdBuscar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtTotalGral = new javax.swing.JFormattedTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtCantArt = new javax.swing.JFormattedTextField();

        jLabel3.setText("jLabel3");

        jRadioButton1.setText("jRadioButton1");

        jLabel21.setText("Empresa");

        txtNomEmpresa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomEmpresa1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cobrar Comprobantes Crédito - KARU SGCG v1.0");
        setResizable(false);

        panArticulo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()));

        cmdQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/quitar.png"))); // NOI18N
        cmdQuitar.setToolTipText("Quitar de la lista");
        cmdQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdQuitarActionPerformed(evt);
            }
        });

        cmdAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Select.png"))); // NOI18N
        cmdAgregar.setToolTipText("Agregar a lista");
        cmdAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgregarActionPerformed(evt);
            }
        });

        txtCodTribFac.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodTribFac.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodTribFac.setToolTipText("Presione F9 para lanzar el buscador.");
        txtCodTribFac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodTribFacKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodTribFacKeyTyped(evt);
            }
        });

        txtCodSucFac.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodSucFac.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodSucFac.setToolTipText("Presione F9 para lanzar el buscador.");
        txtCodSucFac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodSucFacKeyPressed(evt);
            }
        });

        txtNroFactura.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNroFactura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNroFactura.setToolTipText("Presione F9 para lanzar el buscador.");
        txtNroFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNroFacturaActionPerformed(evt);
            }
        });
        txtNroFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNroFacturaKeyPressed(evt);
            }
        });

        jLabel2.setText("Nro. Factura");

        jLabel15.setText("Pendiente");

        jLabel14.setText("A Cancelar");

        txtImpPendiente.setEditable(false);
        txtImpPendiente.setBackground(new java.awt.Color(204, 255, 255));
        txtImpPendiente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtImpPendiente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtImpCancelar.setBackground(new java.awt.Color(255, 255, 204));
        txtImpCancelar.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtImpCancelar.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout panArticuloLayout = new javax.swing.GroupLayout(panArticulo);
        panArticulo.setLayout(panArticuloLayout);
        panArticuloLayout.setHorizontalGroup(
            panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panArticuloLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panArticuloLayout.createSequentialGroup()
                        .addComponent(txtCodTribFac, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(txtCodSucFac, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(txtNroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImpPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtImpCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmdAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panArticuloLayout.setVerticalGroup(
            panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panArticuloLayout.createSequentialGroup()
                .addGroup(panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panArticuloLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdAgregar)
                            .addComponent(cmdQuitar)))
                    .addGroup(panArticuloLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panArticuloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodTribFac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodSucFac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtImpPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtImpCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabComprobantes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        tabComprobantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "nro_trans", "cod_tribut_fac", "cod_suc_fac", "nro_factura", "Imp. a Cancelar", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabComprobantes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabComprobantes.setEnabled(false);
        jScrollPane1.setViewportView(tabComprobantes);
        tabComprobantes.getAccessibleContext().setAccessibleName("");

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtFechaHora.setEditable(false);
        txtFechaHora.setBackground(new java.awt.Color(204, 255, 255));
        txtFechaHora.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtFechaHora.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtCodUsuario.setEditable(false);
        txtCodUsuario.setBackground(new java.awt.Color(204, 255, 255));
        txtCodUsuario.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodUsuarioActionPerformed(evt);
            }
        });

        txtNomUsuario.setEditable(false);
        txtNomUsuario.setBackground(new java.awt.Color(204, 255, 255));
        txtNomUsuario.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNomUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtCodUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtNomUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabPaneCabecera.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        panFactura.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtCodTipoComp.setEditable(false);
        txtCodTipoComp.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodTipoComp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodTipoCompFocusLost(evt);
            }
        });

        jLabel5.setText("Tipo Comprobante");

        txtDescTipComp.setEditable(false);
        txtDescTipComp.setBackground(new java.awt.Color(204, 255, 255));
        txtDescTipComp.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtDescTipComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescTipCompActionPerformed(evt);
            }
        });

        jLabel6.setText("Nro. Recibo");

        txtCodTribRe.setEditable(false);
        txtCodTribRe.setBackground(new java.awt.Color(255, 255, 204));
        txtCodTribRe.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtCodTribRe.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodTribRe.setEnabled(false);

        txtCodSucRe.setEditable(false);
        txtCodSucRe.setBackground(new java.awt.Color(255, 255, 204));
        txtCodSucRe.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtCodSucRe.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodSucRe.setEnabled(false);

        txtNroRecibo.setEditable(false);
        txtNroRecibo.setBackground(new java.awt.Color(255, 255, 204));
        txtNroRecibo.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        txtNroRecibo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNroRecibo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNroReciboActionPerformed(evt);
            }
        });

        txtCodCliente.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodCliente.setToolTipText("Presione F9 para lanzar el buscador.");
        txtCodCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodClienteActionPerformed(evt);
            }
        });
        txtCodCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodClienteFocusLost(evt);
            }
        });
        txtCodCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodClienteKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodClienteKeyTyped(evt);
            }
        });

        jLabel13.setText("Cliente");

        txtNomCliente.setEditable(false);
        txtNomCliente.setBackground(new java.awt.Color(204, 255, 255));
        txtNomCliente.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        txtCodSuc.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodSuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodSucActionPerformed(evt);
            }
        });
        txtCodSuc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodSucFocusLost(evt);
            }
        });

        jLabel20.setText("Sucursal");

        txtNomSuc.setEditable(false);
        txtNomSuc.setBackground(new java.awt.Color(204, 255, 255));
        txtNomSuc.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNomSuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomSucActionPerformed(evt);
            }
        });

        jLabel22.setText("Caja");

        txtCodCaja.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodCaja.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCajaFocusLost(evt);
            }
        });
        txtCodCaja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodCajaKeyTyped(evt);
            }
        });

        txtNomCaja.setEditable(false);
        txtNomCaja.setBackground(new java.awt.Color(204, 255, 255));
        txtNomCaja.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNomCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCajaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panFacturaLayout = new javax.swing.GroupLayout(panFactura);
        panFactura.setLayout(panFacturaLayout);
        panFacturaLayout.setHorizontalGroup(
            panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panFacturaLayout.createSequentialGroup()
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(txtCodTipoComp, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtDescTipComp, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 25, Short.MAX_VALUE)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addComponent(txtCodTribRe, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtCodSucRe, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtNroRecibo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(txtCodCliente)
                        .addGap(1, 1, 1)
                        .addComponent(txtNomCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(172, 172, 172))
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addComponent(txtCodSuc, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtNomSuc)
                                .addGap(24, 24, 24))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panFacturaLayout.createSequentialGroup()
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addComponent(txtCodCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(txtNomCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))))
        );
        panFacturaLayout.setVerticalGroup(
            panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodTipoComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescTipComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodTribRe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodSucRe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNroRecibo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodSuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomSuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNomCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNomCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        tabPaneCabecera.addTab("Datos de Cobro", panFactura);

        panCondPago.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabValores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabValores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "F. Pago", "Descripción", "Bco./Proc.", "Descripción", "Moneda", "Descripción", "TC", "Ref. Operación", "Importe", "Coutas", "Trans"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, false, true, false, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabValores.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabValores.setRowSelectionAllowed(false);
        tabValores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabValoresKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabValoresKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tabValoresKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(tabValores);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Pendiente a cancelar:");

        txtPendiente.setBackground(new java.awt.Color(255, 255, 204));
        txtPendiente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPendiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPendienteActionPerformed(evt);
            }
        });

        cmdQuitarValor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/quitar.png"))); // NOI18N
        cmdQuitarValor.setToolTipText("Quitar línea de valores");
        cmdQuitarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdQuitarValorActionPerformed(evt);
            }
        });

        cmdAgregarValor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Select.png"))); // NOI18N
        cmdAgregarValor.setToolTipText("Agregar línea para valores");
        cmdAgregarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgregarValorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panCondPagoLayout = new javax.swing.GroupLayout(panCondPago);
        panCondPago.setLayout(panCondPagoLayout);
        panCondPagoLayout.setHorizontalGroup(
            panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCondPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panCondPagoLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmdQuitarValor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(cmdAgregarValor, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panCondPagoLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))))
        );
        panCondPagoLayout.setVerticalGroup(
            panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCondPagoLayout.createSequentialGroup()
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(cmdAgregarValor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdQuitarValor)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap())
        );

        tabPaneCabecera.addTab("Valores", panCondPago);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmdNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/New.png"))); // NOI18N
        cmdNuevo.setToolTipText("Nuevo");
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Save.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar");
        cmdGuardar.setEnabled(false);
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/edit.png"))); // NOI18N
        cmdEditar.setToolTipText("Editar");
        cmdEditar.setEnabled(false);
        cmdEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Trashcan_empty.png"))); // NOI18N
        cmdBorrar.setToolTipText("Borrar");
        cmdBorrar.setEnabled(false);
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/cancel32.png"))); // NOI18N
        cmdCancelar.setToolTipText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        cmdImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/imprimir 24.png"))); // NOI18N
        cmdImprimir.setToolTipText("Imprimir");
        cmdImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImprimirActionPerformed(evt);
            }
        });

        cmdBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Search (2).png"))); // NOI18N
        cmdBuscar.setToolTipText("Buscar");
        cmdBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(cmdNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdImprimir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmdBorrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdEditar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTotalGral.setEditable(false);
        txtTotalGral.setBackground(new java.awt.Color(255, 255, 204));
        txtTotalGral.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtTotalGral.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalGral.setText("0");
        txtTotalGral.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtTotalGral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalGralActionPerformed(evt);
            }
        });

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Importe Total");

        jLabel1.setText("Cant. Líneas");

        txtCantArt.setEditable(false);
        txtCantArt.setBackground(new java.awt.Color(255, 255, 255));
        txtCantArt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCantArt.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCantArt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalGral, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalGral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel1)
                    .addComponent(txtCantArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panArticulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tabPaneCabecera, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabPaneCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodUsuarioActionPerformed

    private void txtNomEmpresa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomEmpresa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomEmpresa1ActionPerformed

    private void txtNomCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCajaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomCajaActionPerformed

    private void txtNomSucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomSucActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomSucActionPerformed

    private void txtCodSucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodSucActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodSucActionPerformed

    private void txtCodClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodClienteKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            buscar();
        }
    }//GEN-LAST:event_txtCodClienteKeyPressed

    private void txtCodClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodClienteActionPerformed

    }//GEN-LAST:event_txtCodClienteActionPerformed

    private void txtNroReciboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNroReciboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNroReciboActionPerformed

    private void txtDescTipCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescTipCompActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescTipCompActionPerformed

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        Fecha fecha = new Fecha();
        if (estadoArqueo == true) {
            habilitarCampos();
            inicializarCampos();
            this.txtFechaHora.setText(fecha.fechaHoraString(fecha.obtenerFechaSistema()));
            obtenerNroDocumento();
            this.origen = "Nuevo";
        } else {
            JOptionPane.showMessageDialog(null, "La caja no esta abierta. Proceda a habilitar la caja antes de comenzar a facturar.",
                    "Factura Venta", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
         if (verificarMontos()) {
        guardar();
        deshabilitarCampos();
        inicializarCampos();

        this.txtCantArt.setValue(0);
        this.txtTotalGral.setValue(0);
         } else {
            JOptionPane.showMessageDialog(null, "El  importe a pagar no cierra con el importe de la compra.",
                    "Facturación", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        inicializarCampos();
        deshabilitarCampos();
        limpiarImporte();
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditarActionPerformed
        habilitarCampos();
    }//GEN-LAST:event_cmdEditarActionPerformed

    private void txtCodClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodClienteFocusLost
        MtClientes cli = new MtClientes();
        if (this.txtCodCliente.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Código de Cliente no ingresado. ",
                    "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.txtCodCliente.setText(this.txtCodCliente.getText().toUpperCase());
            cli = buscarCliente(this.txtCodCliente.getText());
            if (cli == null) {
                JOptionPane.showMessageDialog(null, "El cliente no existe o no se encuentra activo. ",
                        "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
                this.txtCodCliente.setText("");
                this.txtNomCliente.setText("");
                this.txtCodCliente.grabFocus();
            } else {
                this.txtNomCliente.setText(cli.getNomTit());
            }
        }
    }//GEN-LAST:event_txtCodClienteFocusLost

    private void txtCodTipoCompFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodTipoCompFocusLost
        MtTipoComprobantes comp = new MtTipoComprobantes();
        this.txtCodTipoComp.setText(this.txtCodTipoComp.getText().toUpperCase());
        if (this.txtCodTipoComp.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna tipo de comprobante. ",
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            this.txtCodTipoComp.grabFocus();
        } else {
            comp = obtenerTipoComprobante(this.txtCodTipoComp.getText());
            obtenerNroDocumento();
        }
    }//GEN-LAST:event_txtCodTipoCompFocusLost

    private void txtTotalGralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalGralActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalGralActionPerformed

    private void txtCodCajaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodCajaKeyTyped

    }//GEN-LAST:event_txtCodCajaKeyTyped

    private void txtCodCajaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCajaFocusLost
        try {
            Caja caja = null;
            txtCodCaja.setText(txtCodCaja.getText().toUpperCase());
            caja = obtenerCaja(txtCodCaja.getText());
            this.txtNomCaja.setText(caja.getNomCaja());

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al obtener descripción de la caja. ",
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtCodCajaFocusLost

    private void txtCodSucFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodSucFocusLost
        obtenerSucursal(txtCodSuc.getText().toUpperCase());
    }//GEN-LAST:event_txtCodSucFocusLost

    private void txtNomUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomUsuarioActionPerformed

    private void cmdImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImprimirActionPerformed
        imprimir();
    }//GEN-LAST:event_cmdImprimirActionPerformed

    private void cmdBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarActionPerformed

    }//GEN-LAST:event_cmdBuscarActionPerformed

    private void txtCodClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodClienteKeyTyped

    }//GEN-LAST:event_txtCodClienteKeyTyped

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed

    }//GEN-LAST:event_cmdBorrarActionPerformed

    private void cmdAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgregarActionPerformed
        if (!this.txtImpCancelar.getText().toString().equals("")
                || !this.txtImpCancelar.getText().trim().equals("0")) {

            try {
                BigDecimal pendiente = new BigDecimal(this.txtImpPendiente.getValue().toString());
                BigDecimal cancelar = new BigDecimal(this.txtImpCancelar.getValue().toString());

                if (pendiente.compareTo(cancelar) < 0) {
                    JOptionPane.showMessageDialog(null, "El importe a cancelar es "
                            + "mayor que el saldo pendiente.",
                            "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
                    this.txtImpCancelar.grabFocus();
                } else {
                    cargarElemento();
                    limpiarImporte();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "No el documento no se puede agregar a la grilla. Verifique los montos a cancelar. "
                        + "\n" + ex.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "El importe a cancelar ingresado no es válido.",
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);

            this.txtImpCancelar.grabFocus();
        }
    }//GEN-LAST:event_cmdAgregarActionPerformed

    private void cmdQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdQuitarActionPerformed
        quitarElemento();
        limpiarImporte();
    }//GEN-LAST:event_cmdQuitarActionPerformed

    private void txtNroFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNroFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNroFacturaActionPerformed

    private void txtCodTribFacKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodTribFacKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodTribFacKeyTyped

    private void txtNroFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroFacturaKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            if (this.txtNomCliente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Debe ingresar código de cliente.",
                        "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
                this.txtCodCliente.grabFocus();
            } else {
                try {
                    buscarComprobante();
                    cargarDetalle();
                } catch (NullPointerException e) {

                }
            }
        }
    }//GEN-LAST:event_txtNroFacturaKeyPressed

    private void txtCodSucFacKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodSucFacKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            if (this.txtNomCliente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Debe ingresar código de cliente.",
                        "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
                this.txtCodCliente.grabFocus();
            } else {
                buscarComprobante();
                cargarDetalle();
            }
        }
    }//GEN-LAST:event_txtCodSucFacKeyPressed

    private void txtCodTribFacKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodTribFacKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            if (this.txtNomCliente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Debe ingresar código de cliente.",
                        "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
                this.txtCodCliente.grabFocus();
            } else {
                buscarComprobante();
                cargarDetalle();
            }
        }
    }//GEN-LAST:event_txtCodTribFacKeyPressed

    private void tabValoresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabValoresKeyPressed
        int selectedRow = tabValores.getSelectedRow();
        int selectedCol = tabValores.getSelectedColumn() - 1;

        if (selectedCol >= 0) {
            if (evt.getKeyCode() == VK_TAB || evt.getKeyCode() == VK_ENTER) {
                controlValores(selectedRow, selectedCol);
            }
        }
    }//GEN-LAST:event_tabValoresKeyPressed

    private void tabValoresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabValoresKeyTyped

    }//GEN-LAST:event_tabValoresKeyTyped

    private void tabValoresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabValoresKeyReleased

    }//GEN-LAST:event_tabValoresKeyReleased

    private void cmdQuitarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdQuitarValorActionPerformed
        int selectedRow = tabValores.getSelectedRow();

        quitarValores(modelVal, selectedRow);
        actualizarSaldoPendiente();
    }//GEN-LAST:event_cmdQuitarValorActionPerformed

    private void cmdAgregarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgregarValorActionPerformed
        agregarFilasValores();
    }//GEN-LAST:event_cmdAgregarValorActionPerformed

    private void txtPendienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPendienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPendienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CobrarComprobante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CobrarComprobante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CobrarComprobante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CobrarComprobante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CobrarComprobante dialog = new CobrarComprobante(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAgregar;
    private javax.swing.JButton cmdAgregarValor;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdBuscar;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdEditar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdImprimir;
    private javax.swing.JButton cmdNuevo;
    private javax.swing.JButton cmdQuitar;
    private javax.swing.JButton cmdQuitarValor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panArticulo;
    private javax.swing.JPanel panCondPago;
    private javax.swing.JPanel panFactura;
    private javax.swing.JTable tabComprobantes;
    private javax.swing.JTabbedPane tabPaneCabecera;
    private javax.swing.JTable tabValores;
    private javax.swing.JFormattedTextField txtCantArt;
    private javax.swing.JTextField txtCodCaja;
    private javax.swing.JTextField txtCodCliente;
    private javax.swing.JTextField txtCodEmpresa1;
    private javax.swing.JTextField txtCodSuc;
    private javax.swing.JTextField txtCodSucFac;
    private javax.swing.JTextField txtCodSucRe;
    private javax.swing.JTextField txtCodTipoComp;
    private javax.swing.JTextField txtCodTribFac;
    private javax.swing.JTextField txtCodTribRe;
    private javax.swing.JTextField txtCodUsuario;
    private javax.swing.JTextField txtDescTipComp;
    private javax.swing.JTextField txtFechaHora;
    private javax.swing.JFormattedTextField txtImpCancelar;
    private javax.swing.JFormattedTextField txtImpPendiente;
    private javax.swing.JTextField txtNomCaja;
    private javax.swing.JTextField txtNomCliente;
    private javax.swing.JTextField txtNomEmpresa1;
    private javax.swing.JTextField txtNomSuc;
    private javax.swing.JTextField txtNomUsuario;
    private javax.swing.JTextField txtNroFactura;
    private javax.swing.JTextField txtNroRecibo;
    private javax.swing.JFormattedTextField txtPendiente;
    private javax.swing.JFormattedTextField txtTotalGral;
    // End of variables declaration//GEN-END:variables

    public void inicializarCampos() {
        this.txtFechaHora.setText("");
        this.txtCodCliente.setText("");
        this.txtNomCliente.setText("");
        this.txtCodTribRe.setText("");
        this.txtCodSucRe.setText("");
        this.txtNroRecibo.setText("");
        this.txtCantArt.setValue(0);

        tableModel();
        tableModelVal();
    }

    private void habilitarCampos() {
        this.cmdGuardar.setEnabled(true);
        this.cmdCancelar.setEnabled(true);
        this.cmdBorrar.setEnabled(false);
        this.cmdNuevo.setEnabled(false);
        //this.cmdEditar.setEnabled(false);

        this.cmdAgregar.setEnabled(true);
        this.cmdQuitar.setEnabled(true);

        this.tabComprobantes.setEnabled(true);
    }

    private void deshabilitarCampos() {
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setEnabled(false);
        this.cmdBorrar.setEnabled(true);
        this.cmdNuevo.setEnabled(true);
        //this.cmdEditar.setEnabled(true);

        this.cmdAgregar.setEnabled(false);
        this.cmdQuitar.setEnabled(false);

        this.tabComprobantes.setEnabled(false);
    }

    //limpia los campos del area de carga de Articulos
    private void limpiarImporte() {
        this.txtCodTribFac.setText("");
        this.txtCodSucFac.setText("");
        this.txtNroFactura.setText("");
        this.txtImpPendiente.setValue(0);
        this.txtImpCancelar.setValue(0);
    }

    public MtClientes buscarCliente(String codigo) {
        MtClientes cliente = null;
        try {
            Query query = st.createQuery("From MtClientes c Where c.nroDocum = ? and c.esActivo = 'S'");
            query.setParameter(0, codigo);
            cliente = (MtClientes) query.uniqueResult();
        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Existen varios clientes con el mismo codigo. Busque con el asistente.",
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
        return cliente;
    }

    private void valoresDefecto() {
        Caja caja = null;
        obtenerCajero(this.usuario);

        this.txtCodUsuario.setText(this.usuario);
        obtenerUsuario(this.usuario);

        this.txtCodCaja.setText(masterCajero.getCaja().getCodCaja());
        this.txtNomCaja.setText(masterCajero.getCaja().getNomCaja());
        caja = masterCajero.getCaja();

        //MtSucursales suc = obtenerSucursal(masterCajero.getMtSucursales().getCodSucursal());
        this.txtCodSuc.setText(masterCajero.getMtSucursales().getCodSucursal());
        this.txtNomSuc.setText(masterCajero.getMtSucursales().getNomSucursal());

        this.txtCodTipoComp.setText("RE");
        obtenerTipoComprobante("RE");
    }

    //obtiene descripción de tipo de comprobante.
    public MtTipoComprobantes obtenerTipoComprobante(String cod) {
        MtTipoComprobantes comp = null;
        try {
            comp = (MtTipoComprobantes) st.get(MtTipoComprobantes.class, cod);
            if (comp == null) {
                JOptionPane.showMessageDialog(null, "Código buscado no existe. Intente de nuevo.",
                        "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtDescTipComp.setText(comp.getDescripcion());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
        return comp;
    }

    //obtiene descripción de moneda.
    public MtMonedas obtenerMoneda(int cod) {
        MtMonedas mon = null;
        try {
            mon = (MtMonedas) st.get(MtMonedas.class, cod);
            if (mon == null) {
                JOptionPane.showMessageDialog(null, "Código buscado no existe. Intente de nuevo.",
                        "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
        return mon;
    }

    //obtiene descripcion de la forma de pago.
    public MtFormaPago obtenerFormaPago(int cod) {
        MtFormaPago comp = null;
        try {
            comp = (MtFormaPago) st.get(MtFormaPago.class, cod);
            if (comp == null) {
                JOptionPane.showMessageDialog(null, "Código buscado no existe. Intente de nuevo.",
                        "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
        return comp;
    }

    //retorna la caja asignada.
    public Caja obtenerCaja(String cod) {
        Caja caja = null;
        try {
            caja = (Caja) st.get(Caja.class, cod);
            if (caja == null) {
                JOptionPane.showMessageDialog(null, "Código de caja buscado no existe. Intente de nuevo.",
                        "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomCaja.setText(caja.getNomCaja());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
        return caja;
    }

    //retorna la sucursal
    public MtSucursales obtenerSucursal(String cod) {
        MtSucursales suc = null;
        try {
            suc = (MtSucursales) st.get(MtSucursales.class, cod);
            if (suc == null) {
                JOptionPane.showMessageDialog(null, "Código de sucursal buscado no existe. Intente de nuevo.",
                        "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
            }//else {
            //this.txtNomSuc.setText(suc.getNomSucursal());
            // }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
        return suc;
    }

    public void obtenerUsuario(String cod) {
        try {
            MtUsuarios user = (MtUsuarios) st.get(MtUsuarios.class, cod);
            if (user == null) {
                JOptionPane.showMessageDialog(null, "Código de usuario buscado no existe. Intente de nuevo.",
                        "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomUsuario.setText(user.getNomUsuario());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
    }

    //obtiene el datos del cajero
    public void obtenerCajero(String cajero) {
        MtCajeros caj = null;
        try {
            Query query = st.createQuery("From MtCajeros c Where c.codUsuario = ? and c.activo = 'S'");
            query.setParameter(0, cajero);
            try {
                caj = (MtCajeros) query.uniqueResult();
                this.masterCajero = caj;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cajero activo para varias cajas." + e.getMessage(),
                        "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al recuperar registros del Cajero."
                    + "\n" + ex.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
    }

    //obtiene el nro de comprobante asignado a la caja y que se encuentre activo.
    public void obtenerNroDocumento() {
        MtComprobantes comp = null;
        try {
            Query query = st.createQuery("From MtComprobantes c Where c.codSucursal = ? "
                    + " and c.codCaja = ? and c.tipoDocum = ? and c.esActivo = true");
            query.setParameter(0, this.txtCodSuc.getText());
            query.setParameter(1, this.txtCodCaja.getText());
            query.setParameter(2, this.txtCodTipoComp.getText());

            try {
                comp = (MtComprobantes) query.uniqueResult();
                //en caso que no esté asignado un comprobante con la caja.
                if (comp == null) {
                    JOptionPane.showMessageDialog(null, "No se encuentra recibo asignado a esta caja.",
                            "Cobrar Comprobantes", JOptionPane.INFORMATION_MESSAGE);
                    this.txtCodTribRe.setText("");
                    this.txtCodSucRe.setText("");
                    this.txtNroRecibo.setText("");
                    this.cmdGuardar.setEnabled(false);

                } else {

                    this.cmdGuardar.setEnabled(true);
                    this.txtCodTribRe.setText(comp.getCodTribut());
                    this.txtCodSucRe.setText(comp.getCodSucFac());
                    this.txtNroRecibo.setText((comp.getNroFactura()).toString());
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cajero activo para varias cajas. "
                        + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al recuperar numero de recibo. "
                    + "\n" + ex.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
    }

    private MtProcTarjetas obtenerProcesadora(int cod) {
        MtProcTarjetas proc = null;
        try {
            proc = (MtProcTarjetas) st.get(MtProcTarjetas.class, cod);

            if (proc == null) {
                JOptionPane.showMessageDialog(null, "La Procesadoa buscada no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta de procesadora de tarjetas. "
                    + "\n" + e.getMessage(), "Facturación", JOptionPane.ERROR_MESSAGE);
        }
        return proc;
    }

    private MtBancos obtenerBanco(String cod) {
        MtBancos bco = null;
        try {
            bco = (MtBancos) st.get(MtBancos.class, cod);

            if (bco == null) {
                JOptionPane.showMessageDialog(null, "Banco buscado no existe. Intente de nuevo.",
                        "Factura Venta", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta de bancos. "
                    + "\n" + e.getMessage(), "Facturación", JOptionPane.ERROR_MESSAGE);
        }
        return bco;
    }

    //agrega los datos del artículo en la grilla de artículos
    private void cargarElemento() {
        SaPendientes pend = this.superFactura;
        try {
            BigDecimal pendiente = new BigDecimal(this.txtImpPendiente.getValue().toString());
            BigDecimal cancelar = new BigDecimal(this.txtImpCancelar.getValue().toString());

            model.addRow(new Object[]{
                pend.getNroTrans(), pend.getCodTributFac(), pend.getCodSucFac(),
                pend.getNroDocum(), cancelar, pendiente.subtract(cancelar)});

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al agregar comprobante."
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }

        actualizarTotales();
        this.txtCantArt.setValue(model.getRowCount());
    }

    private void actualizarTotales() {
        BigDecimal importe = BigDecimal.ZERO;
        BigDecimal total = BigDecimal.ZERO;
        int cantArt = model.getRowCount();

        try {
            if (cantArt > 0) {
                for (int i = 0; i < cantArt; i++) {
                    importe = new BigDecimal(model.getValueAt(i, 4).toString());
                    total = total.add(importe);
                }
            } else {
                total = BigDecimal.ZERO;
            }

            this.txtTotalGral.setValue(total);
            this.txtCantArt.setValue(model.getRowCount());
            this.txtPendiente.setValue(total);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al actualizar totales."
                    + "\n" + e.getMessage(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void quitarElemento() {
        try {
            int selectedRow = this.tabComprobantes.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un comprobante para quitar de la lista.",
                        "Cobro de Comprobantes", JOptionPane.ERROR_MESSAGE);
            } else {
                model.removeRow(selectedRow);
            }

            actualizarTotales();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al quitar elemento de la lista. "
                    + e.getMessage(), "Cobro de Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
    }

     private void quitarValores(DefaultTableModel modelo, int filaSel) {
        try {
            //int selectedRow = this.tabArticulos.getSelectedRow();
            int selectedRow = filaSel;
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un registro para eliminar.",
                        "Facturación", JOptionPane.ERROR_MESSAGE);
            } else {
                modelo.removeRow(selectedRow);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error al quitar artículo de la lista. "
                    + e.getMessage(), "Facturación", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void guardar() {
        int cant = model.getRowCount();

        if (cant == 0) {
            JOptionPane.showMessageDialog(null, "No hay elementos en la lista. No se puede guardar.",
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                guardarCabecera();
                arranque();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al guardar registro. "
                        + "\n" + ex.getMessage(),
                        "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    //persiste en la BD los datos de la factura_cabecera
    private void guardarCabecera() {
        Cobranza cob = new Cobranza();
        Caja caja = new Caja();

        Date fecha = new Date();
        //FormatearNumero conv = new FormatearNumero();

        try {
            st.beginTransaction();

            caja = masterCajero.getCaja();

            cob.setNroRecibo(Integer.parseInt(this.txtNroRecibo.getText()));
            cob.setCaja(caja);
            cob.setFecha(fecha);
            cob.setCodCliente(this.txtCodCliente.getText());
            cob.setFormaPago(1);
            cob.setEstado('C');
            cob.setAccionMod("Nuevo");
            cob.setUsuarioMod(this.usuario);
            cob.setFechaMod(fecha);

            st.save(cob);

            guardarDetalle(cob);
            actualizarNroComprobante();
            guardarValores(cob);

            st.getTransaction().commit();

        } catch (Exception ex) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al guardar registro de la FacturaCab. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

        model.setNumRows(0);
        deshabilitarCampos();
    }

    //guarda datos del detalle de la factura
    private void guardarDetalle(Cobranza cob) {
        //FormatearNumero conv = new FormatearNumero();
        Date fecha = new Date();
        int cantArt = model.getRowCount();

        try {
            for (int i = 0; i < cantArt; i++) {

                CobranzaDet det = new CobranzaDet();
                CobranzaDetId id = new CobranzaDetId();

                BigDecimal cancelar = new BigDecimal(model.getValueAt(i, 4).toString());
                BigDecimal saldo = new BigDecimal(model.getValueAt(i, 5).toString());

                id.setNroRecibo(cob.getNroRecibo());
                id.setLinea(i + 1);
                det.setId(id);
                det.setCobranza(cob);
                det.setCodCaja(this.txtCodCaja.getText());
                det.setCodTributFac(model.getValueAt(i, 1).toString());
                det.setCodSucFac(model.getValueAt(i, 2).toString());
                det.setNroFactura(Integer.parseInt(model.getValueAt(i, 3).toString()));
                det.setCodCliente(this.txtCodCliente.getText());
                det.setFecVto(fecha);
                det.setImportePagado(cancelar);
                det.setSaldo(saldo);

                det.setAccionMod("Nuevo");
                det.setUsuarioMod(this.usuario);
                det.setFechaMod(fecha);

                st.save(det);

                int nroTrans = Integer.parseInt(model.getValueAt(i, 0).toString());
                actualizarSaldo(nroTrans, saldo);
            }
        } catch (Exception e) {
            st.getTransaction().rollback();

            JOptionPane.showMessageDialog(null, "Ocurrió un error al guardar detalle del comprobante. "
                    + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    
    public void guardarValores(Cobranza cob) {
        int cantArt = modelVal.getRowCount();

        try {
            for (int i = 0; i < cantArt; i++) {

                ValoresDet val = new ValoresDet();
                ValoresDetId id = new ValoresDetId();

                int forma_pago = Integer.parseInt(modelVal.getValueAt(i, 0).toString());
                int emisor = Integer.parseInt(modelVal.getValueAt(i, 2).toString());
                int moneda = Integer.parseInt(modelVal.getValueAt(i, 4).toString());
                int tc = Integer.parseInt(modelVal.getValueAt(i, 6).toString());
                int cuotas = Integer.parseInt(modelVal.getValueAt(i, 9).toString());
                int ref_docum = Integer.parseInt(modelVal.getValueAt(i, 10).toString());
                BigDecimal importe = new BigDecimal(modelVal.getValueAt(i, 8).toString());

                id.setNroTrans(cob.getNroRecibo());
                id.setLinea(i + 1);
                id.setCodDocum("RE");
                val.setId(id);
                val.setCodFormaPago(forma_pago);
                val.setCodEmisor(emisor);
                val.setCodMoneda(moneda);
                val.setTipoCambio(tc);
                val.setRefOperacion(modelVal.getValueAt(i, 7).toString());
                val.setImporte(importe);
                val.setCuotas(cuotas);
                val.setRefDocum(ref_docum);

                //actualiza saldos de la NC
                if (forma_pago == 4) {
                    ActualizarNC actualizar = new ActualizarNC();
                    actualizar.actualizarNC(ref_docum, importe);
                }

                st.save(val);
            }
        } catch (Exception ex) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al guardar el detalle de los valores. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(), "Facturación", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    
    //actualiza el nro de comprobantes.
    private void actualizarNroComprobante() {
        MtComprobantes comp = new MtComprobantes();
        String tipoDocum = this.txtCodTipoComp.getText();
        String caja = this.txtCodCaja.getText();
        String codSucFac = this.txtCodSucRe.getText();
        String codTributFac = this.txtCodTribRe.getText();
        String codSuc = this.txtCodSuc.getText();
        int actual = 0;

        try {
            Query query = st.createQuery("From MtComprobantes c Where c.tipoDocum = ? "
                    + " and c.codTribut = ? and c.codSucFac = ? and c.codCaja = ? "
                    + " and c.codSucursal = ? and c.esActivo = true");
            query.setParameter(0, tipoDocum);
            query.setParameter(1, codTributFac);
            query.setParameter(2, codSucFac);
            query.setParameter(3, caja);
            query.setParameter(4, codSuc);

            comp = (MtComprobantes) query.uniqueResult();

            if (comp == null) {

            } else {
                actual = comp.getNroFactura();
                comp.setNroFactura(actual + 1);

                try {
                   // this.st.beginTransaction();
                    st.update(comp);
                   // this.st.beginTransaction().commit();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error al actualizar el nro. de comprobante. "
                            + "\n" + ex.getMessage() + "\n" + ex.getCause(), "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el nro. de comprobante. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
        }
    }

    //actualiza el saldo del documento pendiente
    private void actualizarSaldo(int trans, BigDecimal saldo) {
        Date fecha = new Date();
        try {
            SaPendientes pend = buscarFacturaPend(trans);

            pend.setSaldo(saldo);
            pend.setAccionMod("Pago");
            pend.setFechaMod(fecha);
            pend.setUsuarioMod(this.usuario);

            st.update(pend);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al actualizar saldo del comprobante. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void buscar() {
        try {
            Busqueda formBusqueda = new Busqueda(this, true, "Busqueda de clientes", "mt_clientes", "nro_docum", "nom_tit");
            formBusqueda.setDefaultCloseOperation(HIDE_ON_CLOSE);
            formBusqueda.setVisible(true);
            String codigo = formBusqueda.getCodigo();
            String nombre = formBusqueda.getDescripcion();
            if (nombre != null) {
                this.txtCodCliente.setText(codigo);
                this.txtNomCliente.setText(nombre);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en el formulario padre. " + "\n"
                    + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //realiza buscaqueda de comprobante mediante el formulario de búsqeda.
    public void buscarComprobante() {
        String cliente = this.txtCodCliente.getText();
        try {
            BuscarComprobante formBusqueda
                    = new BuscarComprobante(this, true, "FT", cliente);
            formBusqueda.setDefaultCloseOperation(HIDE_ON_CLOSE);
            formBusqueda.setVisible(true);

            int codigo = Integer.parseInt(formBusqueda.getCodigoRetorno());
            System.out.println("Seleccionado: " + codigo);
            if (codigo > 0) {
                this.superFactura = buscarFacturaPend(codigo);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al realizar búsqueda de comprobante. " + "\n"
                    + e.getMessage(), "Error de Búsqueda", JOptionPane.ERROR_MESSAGE);
        }
    }

    //busca el comprobante por el nro_trans.
    private SaPendientes buscarFacturaPend(int nroTrans) {
        SaPendientes pend = new SaPendientes();
        try {
            pend = (SaPendientes) st.load(SaPendientes.class, nroTrans);

        } catch (Exception ex) {
            this.txtCodSucFac.grabFocus();
            JOptionPane.showMessageDialog(null, "Ocurrio un error al recuperar comprobante. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Cobrar Comprobantes", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        return pend;
    }

    public void cargarDetalle() {
        BigDecimal pendiente = BigDecimal.ZERO;

        this.txtCodTribFac.setText(this.superFactura.getCodTributFac());
        this.txtCodSucFac.setText(this.superFactura.getCodSucFac());
        this.txtNroFactura.setText(String.valueOf(this.superFactura.getNroDocum()));

        pendiente = this.superFactura.getSaldo();

        this.txtImpPendiente.setValue(pendiente);
        this.txtImpCancelar.setValue(pendiente);
        this.txtImpCancelar.grabFocus();
        this.txtImpCancelar.selectAll();
    }

    public void controlValores(int fila, int columna) {
        try {
            int selectedRow = fila;
            int selectedCol = columna;

            if (tabValores.getValueAt(selectedRow, selectedCol).toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "El campo seleccionado no puede estar vacío.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int codForma = Integer.parseInt(tabValores.getValueAt(selectedRow, 0).toString());

                switch (selectedCol) {
                    case 0:
                        MtFormaPago forma = new MtFormaPago();
                        forma = obtenerFormaPago(codForma);
                        tabValores.setValueAt(forma.getDescripcion(), selectedRow, 1);

                        if (codForma == 1 || codForma == 6 || codForma == 7) {
                            tabValores.setValueAt(0, selectedRow, 2);
                            tabValores.setValueAt("CAJA", selectedRow, 3);
                        }

                        if (codForma == 4) {
                            tabValores.setValueAt(0, selectedRow, 2);
                            tabValores.setValueAt("CAJA", selectedRow, 3);
                            tabValores.setValueAt(1, selectedRow, 4);
                            tabValores.setValueAt(1, selectedRow, 6);

                            buscarNC(selectedRow);
                            tabValores.changeSelection(selectedRow, 8, false, false);
                        }

                        tabValores.changeSelection(selectedRow, 2, false, false);
                        break;

                    case 1: // no realiza nada
                        break;

                    case 2:
                        if (codForma == 2 || codForma == 3) {
                            MtProcTarjetas proc = new MtProcTarjetas();
                            int cod = Integer.parseInt(
                                    tabValores.getValueAt(selectedRow, 2).toString());
                            proc = obtenerProcesadora(cod);
                            tabValores.setValueAt(proc.getNombreProc(), selectedRow, 3);
                        }
                        if (codForma == 5) {
                            MtBancos bco = new MtBancos();
                            String codBco = tabValores.getValueAt(selectedRow, 2).toString();
                            bco = obtenerBanco(codBco);
                            tabValores.setValueAt(bco.getNomBanco(), selectedRow, 3);
                        }
                        tabValores.changeSelection(selectedRow, 4, false, false);
                        break;

                    case 3:  // no realiza nada
                        break;

                    case 4:
                        MtMonedas mon = new MtMonedas();
                        int cod = Integer.parseInt(
                                tabValores.getValueAt(selectedRow, 4).toString());
                        mon = obtenerMoneda(cod);
                        tabValores.setValueAt(mon.getSimbolo(), selectedRow, 5);
                        tabValores.setValueAt(1, selectedRow, 6);
                        tabValores.changeSelection(selectedRow, 6, false, false);
                        break;

                    case 5: // no realiza nada
                        break;

                    case 6:
                        if (tabValores.getValueAt(selectedRow, 6).toString().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Valor no válido en el campo TC.",
                                    "Error", JOptionPane.ERROR_MESSAGE);
                            tabValores.changeSelection(selectedRow, 6, false, false);
                        } else {
                            int tc = Integer.parseInt(tabValores.getValueAt(selectedRow, 6).toString());
                            if (tc <= 0) {
                                JOptionPane.showMessageDialog(null, "Tipo de Cambio debe ser mayor a 0 (cero).",
                                        "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        break;

                    case 7:
                        if ((codForma == 2 || codForma == 3)
                                && tabValores.getValueAt(selectedRow, 9).toString().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Debe ingresar el nro. de boleta de la transacción.",
                                    "Facturación", JOptionPane.ERROR_MESSAGE);
                            tabValores.changeSelection(selectedRow, 9, false, false);
                        }
                        break;

                    case 8:
                        BigDecimal importe = new BigDecimal(
                                tabValores.getValueAt(selectedRow, 8).toString());
                        int res = importe.compareTo(BigDecimal.ZERO);

                        if (res < 1) {
                            JOptionPane.showMessageDialog(null, "El importe ingresado debe ser mayor a 0.",
                                    "Error", JOptionPane.ERROR_MESSAGE);
                            tabValores.changeSelection(selectedRow, 8, false, false);

                            res = 0;
                            res = importe.compareTo(saldoNc);
                            if (res > 0) {
                                JOptionPane.showMessageDialog(null, "El importe ingresado es mayor al saldo disponible para el documento.",
                                        "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                actualizarSaldoPendiente();
                            }
                        }
                        break;

                    case 9:
                        System.out.println("######## (Cuotas) FPago: " + codForma);
                        if (codForma != 2 || codForma != 3) {
                            tabValores.setValueAt(1, selectedRow, 9);
                        }
                        actualizarSaldoPendiente();
                        break;

                    default:// no realiza nada
                        actualizarSaldoPendiente();
                        break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public boolean verificarMontos() {
        boolean retorno;

        FormatearNumero val = new FormatearNumero();
        BigDecimal pendiente = new BigDecimal(this.txtPendiente.getValue().toString());

        retorno = pendiente.compareTo(BigDecimal.ZERO) == 0;

        return retorno;
    }

    private void agregarFilasValores() {
        try {
            modelVal.addRow(new Object[]{"", "", "", "", 1, "Gs.", 1, "0", "", 1, 0});
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void habilitacionCaja() {
        ControlArqueo control = new ControlArqueo();
        ArqueoCab arq = null;
        Fecha fecha = new Fecha();
        Date date = new Date();
       // arq = control.estadoCaja(this.txtCodCaja.getText(), fecha.fechaString(date), 'A');
         arq = control.estadoCaja(this.txtCodCaja.getText(), date, 'A');
        if (arq != null) {
            this.estadoArqueo = true;
        } else {
            this.estadoArqueo = false;
        }
    }

    public void buscarNC(int selectedRow) {
        SaPendientes pend = new SaPendientes();
        if (this.txtNomCliente.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar código de cliente.",
                    "Factura Venta", JOptionPane.ERROR_MESSAGE);
            this.txtCodCliente.grabFocus();
        } else {

            String cliente = this.txtCodCliente.getText();
            try {
                BuscarComprobante formBusqueda
                        = new BuscarComprobante(this, true, "NC", cliente);
                formBusqueda.setDefaultCloseOperation(HIDE_ON_CLOSE);
                formBusqueda.setVisible(true);

                int codigo = Integer.parseInt(formBusqueda.getCodigoRetorno());

                if (codigo > 0) {
                    pend = buscarFacturaPend(codigo);

                    tabValores.setValueAt(pend.getCodTributFac() + "-" + pend.getCodSucFac()
                            + "-" + pend.getNroDocum(), selectedRow, 7);

                    tabValores.setValueAt(pend.getSaldo(), selectedRow, 8);
                    saldoNc = pend.getSaldo();
                    tabValores.setValueAt(pend.getNroTrans(), selectedRow, 10);
                    System.out.println("*********** Nro trans de la NC: " + tabValores.getValueAt(selectedRow, 10));
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al realizar búsqueda de comprobante. " + "\n"
                        + e.getMessage(), "Error de Búsqueda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void actualizarSaldoPendiente() {
        int cantArt = modelVal.getRowCount();

        try {

            //FormatearNumero val = new FormatearNumero();
            BigDecimal pendiente = new BigDecimal(this.txtTotalGral.getValue().toString());
            BigDecimal sumImporte = BigDecimal.ZERO;
            BigDecimal importe = BigDecimal.ZERO;

            for (int i = 0; i < cantArt; i++) {
                importe = new BigDecimal(tabValores.getValueAt(i, 8).toString());
                sumImporte = sumImporte.add(importe);
            }

            BigDecimal saldo = pendiente.subtract(sumImporte);
            this.txtPendiente.setValue(saldo);

            if (saldo.compareTo(BigDecimal.ZERO) < 0) {
                JOptionPane.showMessageDialog(null, "El importe a abonar es superior al importe de la compra. "
                        + "\n" + "Por favor verificar montos.", "Facturación", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void imprimir() {

    }
}
