package com.app.caja;

import com.entidades.Caja;
import com.entidades.MtBancos;
import com.entidades.MtCajeros;
import com.entidades.MtCheques;
import com.entidades.MtMonedas;
import com.entidades.MtProveedores;
import com.entidades.OrdenPago;
import com.entidades.PagosProveedor;
import com.entidades.TsBancosCtas;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import util.HibernateUtil;
import static java.awt.event.KeyEvent.VK_F9;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.HashMap;
import java.util.Map;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import util.Cargar;
import util.buscar.BuscarComprobante;

/**
 * @author Carlos Pati√±o
 */
public class PagoProveedores extends javax.swing.JDialog {

    /**
     * Creates new form Facturacion
     */
    private String usuario;
    private String origen;
    private String formulario;
    private BigInteger saldo;
    private PagosProveedor masterPago;
    private int posicion; //Variables de clase auxiliares necesarias.
    private List<Object> ArrayPrimaryKey;

    public PagoProveedores(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        hibernateSession();
        this.usuario = "karu";
        this.formulario = this.getClass().getSimpleName();
        valoresDefecto();
        buscarTodosRegistros();
    }

    public PagoProveedores(String user) {
        setLocationRelativeTo(null);
        initComponents();
        hibernateSession();
        this.usuario = user;
        this.formulario = this.getClass().getSimpleName();
        arranque();
        buscarTodosRegistros();
        inicializarCampos();
        valoresDefecto();
    }

    private Session st;
    private MtCajeros masterCajero;
    private MtCheques masterCheque;
    private TsBancosCtas masterCuenta;

    private void hibernateSession() {
        st = HibernateUtil.getSessionFactory().openSession();
    }

    private void arranque() {
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setVisible(true);
        this.cmdCancelar.setEnabled(false);
        
        this.masterCheque = new MtCheques();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        txtCodEmpresa1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtNomEmpresa1 = new javax.swing.JTextField();
        tabPaneCabecera = new javax.swing.JTabbedPane();
        panFactura = new javax.swing.JPanel();
        txtCodProveedor = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtNomProveedor = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtCodCaja = new javax.swing.JTextField();
        txtNomCaja = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtOrdenPago = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtReciboPago = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtTotalGral = new javax.swing.JFormattedTextField();
        txtEstado = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        panCondPago = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtCodMoneda = new javax.swing.JTextField();
        txtDescMoneda = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTipoCambio = new javax.swing.JFormattedTextField();
        cboTipoPago = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        cboBancos = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        cboCtaCte = new javax.swing.JComboBox();
        txtNroCheque = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtSaldoCta = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        cmdNuevo = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdEditar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        cmdImprimir = new javax.swing.JButton();
        cmdBuscar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnUltimo = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnPrimero = new javax.swing.JButton();
        cmdCerrar = new javax.swing.JButton();
        lblInfoPie = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        jRadioButton1.setText("jRadioButton1");

        jLabel21.setText("Empresa");

        txtNomEmpresa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomEmpresa1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pago a Proveedores - KARU SGCG v1.0");
        setResizable(false);

        tabPaneCabecera.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        panFactura.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtCodProveedor.setEditable(false);
        txtCodProveedor.setBackground(new java.awt.Color(255, 255, 255));
        txtCodProveedor.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodProveedor.setToolTipText("Presione F9 para lanzar el buscador.");
        txtCodProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodProveedorActionPerformed(evt);
            }
        });
        txtCodProveedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodProveedorFocusLost(evt);
            }
        });
        txtCodProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodProveedorKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodProveedorKeyTyped(evt);
            }
        });

        jLabel13.setText("Proveedor");

        txtNomProveedor.setEditable(false);
        txtNomProveedor.setBackground(new java.awt.Color(204, 255, 255));
        txtNomProveedor.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel22.setText("Caja");

        txtCodCaja.setEditable(false);
        txtCodCaja.setBackground(new java.awt.Color(245, 245, 255));
        txtCodCaja.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodCaja.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCajaFocusLost(evt);
            }
        });
        txtCodCaja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodCajaKeyTyped(evt);
            }
        });

        txtNomCaja.setEditable(false);
        txtNomCaja.setBackground(new java.awt.Color(204, 255, 255));
        txtNomCaja.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtNomCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCajaActionPerformed(evt);
            }
        });

        jLabel1.setText("Orden de Pago");

        txtOrdenPago.setEditable(false);
        txtOrdenPago.setBackground(new java.awt.Color(255, 255, 204));
        txtOrdenPago.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtOrdenPago.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtOrdenPago.setToolTipText("Presione F9 para iniciar el buscador");
        txtOrdenPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOrdenPagoFocusLost(evt);
            }
        });
        txtOrdenPago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOrdenPagoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOrdenPagoKeyTyped(evt);
            }
        });

        jLabel2.setText("Recibo de Pago");

        txtReciboPago.setToolTipText("Nro. de recibo del proveedor acusando pago");
        txtReciboPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReciboPagoFocusLost(evt);
            }
        });
        txtReciboPago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtReciboPagoKeyTyped(evt);
            }
        });

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setText("Importe Total OP");

        txtTotalGral.setEditable(false);
        txtTotalGral.setBackground(new java.awt.Color(255, 255, 204));
        txtTotalGral.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtTotalGral.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        txtEstado.setEditable(false);
        txtEstado.setBackground(new java.awt.Color(204, 255, 255));
        txtEstado.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel6.setText("Estado");

        javax.swing.GroupLayout panFacturaLayout = new javax.swing.GroupLayout(panFactura);
        panFactura.setLayout(panFacturaLayout);
        panFacturaLayout.setHorizontalGroup(
            panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panFacturaLayout.createSequentialGroup()
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panFacturaLayout.createSequentialGroup()
                                    .addComponent(txtCodProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(1, 1, 1)
                                    .addComponent(txtNomProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panFacturaLayout.createSequentialGroup()
                                    .addComponent(txtCodCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(1, 1, 1)
                                    .addComponent(txtNomCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panFacturaLayout.createSequentialGroup()
                                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtReciboPago, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTotalGral, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 72, Short.MAX_VALUE))
                    .addGroup(panFacturaLayout.createSequentialGroup()
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtOrdenPago, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEstado)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63))))
        );
        panFacturaLayout.setVerticalGroup(
            panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addGap(5, 5, 5)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrdenPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addGap(4, 4, 4)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReciboPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalGral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        tabPaneCabecera.addTab("Datos del Pago", panFactura);

        panCondPago.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel11.setText("Forma de Pago");

        jLabel12.setText("Moneda");

        txtCodMoneda.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtCodMoneda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodMonedaActionPerformed(evt);
            }
        });
        txtCodMoneda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodMonedaFocusLost(evt);
            }
        });
        txtCodMoneda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodMonedaKeyTyped(evt);
            }
        });

        txtDescMoneda.setEditable(false);
        txtDescMoneda.setBackground(new java.awt.Color(204, 255, 255));
        txtDescMoneda.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel4.setText("Cambio");

        txtTipoCambio.setEditable(false);
        txtTipoCambio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        txtTipoCambio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTipoCambio.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtTipoCambio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTipoCambioKeyTyped(evt);
            }
        });

        cboTipoPago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Efectivo", "Cheque" }));
        cboTipoPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboTipoPagoFocusLost(evt);
            }
        });

        jLabel14.setText("Banco");

        cboBancos.setEnabled(false);
        cboBancos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboBancosFocusLost(evt);
            }
        });

        jLabel15.setText("Nro. Cuenta Corriente");

        cboCtaCte.setEnabled(false);
        cboCtaCte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboCtaCteFocusLost(evt);
            }
        });

        txtNroCheque.setEditable(false);
        txtNroCheque.setToolTipText("Nro. de Cheque asignado");

        jLabel5.setText("Nro. Cheque");

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("Saldo Disponible en Cta.");

        txtSaldoCta.setEditable(false);
        txtSaldoCta.setBackground(new java.awt.Color(255, 255, 204));
        txtSaldoCta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtSaldoCta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout panCondPagoLayout = new javax.swing.GroupLayout(panCondPago);
        panCondPago.setLayout(panCondPagoLayout);
        panCondPagoLayout.setHorizontalGroup(
            panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCondPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addComponent(cboTipoPago, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cboBancos, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNroCheque, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cboCtaCte, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panCondPagoLayout.createSequentialGroup()
                                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panCondPagoLayout.createSequentialGroup()
                                        .addComponent(txtCodMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1)
                                        .addComponent(txtDescMoneda)))
                                .addGap(10, 10, 10)
                                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTipoCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(196, 196, 196))
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSaldoCta, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panCondPagoLayout.setVerticalGroup(
            panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCondPagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTipoCambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboBancos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panCondPagoLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboCtaCte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panCondPagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNroCheque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSaldoCta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        tabPaneCabecera.addTab("Condiciones de Pago", panCondPago);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmdNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/New.png"))); // NOI18N
        cmdNuevo.setToolTipText("Nuevo");
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Save.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar");
        cmdGuardar.setEnabled(false);
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/edit.png"))); // NOI18N
        cmdEditar.setToolTipText("Editar");
        cmdEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Trashcan_empty.png"))); // NOI18N
        cmdBorrar.setToolTipText("Anular Pago");
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/cancel32.png"))); // NOI18N
        cmdCancelar.setToolTipText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        cmdImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/imprimir 24.png"))); // NOI18N
        cmdImprimir.setToolTipText("Imprimir");
        cmdImprimir.setEnabled(false);
        cmdImprimir.setOpaque(false);
        cmdImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImprimirActionPerformed(evt);
            }
        });

        cmdBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Search (2).png"))); // NOI18N
        cmdBuscar.setToolTipText("Buscar");
        cmdBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(cmdNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdImprimir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmdBorrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdEditar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setToolTipText("Panel de Navegaci√≥n");

        btnUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/ULTIMO.png"))); // NOI18N
        btnUltimo.setToolTipText("√öltimo Registro");
        btnUltimo.setMaximumSize(new java.awt.Dimension(24, 24));
        btnUltimo.setMinimumSize(new java.awt.Dimension(24, 24));
        btnUltimo.setPreferredSize(new java.awt.Dimension(24, 24));
        btnUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoActionPerformed(evt);
            }
        });

        btnSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/SIGUIENTE.png"))); // NOI18N
        btnSiguiente.setToolTipText("Registro Siguiente");
        btnSiguiente.setMaximumSize(new java.awt.Dimension(24, 24));
        btnSiguiente.setMinimumSize(new java.awt.Dimension(24, 24));
        btnSiguiente.setPreferredSize(new java.awt.Dimension(24, 24));
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/ANTERIOR.png"))); // NOI18N
        btnAnterior.setToolTipText("Registro Anterior");
        btnAnterior.setMaximumSize(new java.awt.Dimension(24, 24));
        btnAnterior.setMinimumSize(new java.awt.Dimension(24, 24));
        btnAnterior.setPreferredSize(new java.awt.Dimension(24, 24));
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnPrimero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/primero.png"))); // NOI18N
        btnPrimero.setToolTipText("Primer Registro");
        btnPrimero.setMaximumSize(new java.awt.Dimension(24, 24));
        btnPrimero.setMinimumSize(new java.awt.Dimension(24, 24));
        btnPrimero.setPreferredSize(new java.awt.Dimension(24, 24));
        btnPrimero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeroActionPerformed(evt);
            }
        });

        cmdCerrar.setText("Cerrar");
        cmdCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCerrarActionPerformed(evt);
            }
        });

        lblInfoPie.setText("Karu");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblInfoPie, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdCerrar)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrimero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdCerrar)
                    .addComponent(lblInfoPie))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabPaneCabecera, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabPaneCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodMonedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodMonedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodMonedaActionPerformed

    private void txtNomEmpresa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomEmpresa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomEmpresa1ActionPerformed

    private void txtCodProveedorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodProveedorKeyPressed
        /*if (evt.getKeyCode() == VK_F9) {
            buscar();
        }*/
    }//GEN-LAST:event_txtCodProveedorKeyPressed

    private void txtCodProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodProveedorActionPerformed

    }//GEN-LAST:event_txtCodProveedorActionPerformed

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        // fecha = new Fecha();
        habilitarCampos();
        inicializarCampos();
        origen = "Nuevo";
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        guardar();
        deshabilitarCampos();
        buscarTodosRegistros();
        inicializarCampos();
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        inicializarCampos();
        deshabilitarCampos();
        deshabilitarCheque();
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditarActionPerformed
        origen = "Editar";
        habilitarCampos();
        this.txtOrdenPago.setEditable(false);
    }//GEN-LAST:event_cmdEditarActionPerformed

    private void txtCodProveedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodProveedorFocusLost
/*        MtProveedores prov = new MtProveedores();
        if (this.txtCodProveedor.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "C√≥digo de proveedor no ingresado. ",
                    "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.txtCodProveedor.setText(this.txtCodProveedor.getText().toUpperCase());
            prov = buscarProveedor(this.txtCodProveedor.getText());
            if (prov == null) {
                JOptionPane.showMessageDialog(null, "El proveedor no existe o no se encuentra activo. ",
                        "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
                this.txtCodProveedor.setText("");
                this.txtNomProveedor.setText("");
                this.txtCodProveedor.grabFocus();
            } else {
                this.txtNomProveedor.setText(prov.getNomTit());
            }
        }*/
    }//GEN-LAST:event_txtCodProveedorFocusLost

    private void txtCodMonedaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodMonedaFocusLost
        MtMonedas mon = new MtMonedas();
        
        if (this.txtCodMoneda.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna moneda. ",
                    "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            this.txtCodMoneda.grabFocus();
        } else {
            mon = obtenerMoneda(Integer.parseInt(this.txtCodMoneda.getText()));
            this.txtDescMoneda.setText(mon.getNomMoneda());
            if (this.txtCodMoneda.getText().equals("1")) {
                this.txtTipoCambio.setValue(1);
                this.txtTipoCambio.setEnabled(false);
            } else {
                this.txtTipoCambio.setValue(buscarTipoCambio(mon.getCodMoneda()));
                this.txtTipoCambio.setEnabled(true);
                this.txtTipoCambio.setEditable(true);
            }
        }
    }//GEN-LAST:event_txtCodMonedaFocusLost

    private void txtCodMonedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodMonedaKeyTyped
        char car = evt.getKeyChar();
        if (txtCodMoneda.getText().length() >= 2) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodMonedaKeyTyped

    private void cmdImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImprimirActionPerformed
        //imprimir();
    }//GEN-LAST:event_cmdImprimirActionPerformed

    private void cmdBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarActionPerformed
        String valor = JOptionPane.showInputDialog(this,
                "Ingrese nro. de pago a buscar",
                "Buscar - Pago a Proveedores",
                JOptionPane.QUESTION_MESSAGE);

        try {
            PagosProveedor pago = new PagosProveedor();
            if (!valor.equals("")) {
                int orden = Integer.parseInt(valor);
                if (orden > 0) {
                    pago = buscarPagoProveedor(orden);

                    if (pago != null) {
                        masterPago = pago;

                        TsBancosCtas cta = null;
                        MtBancos bco = obtenerBanco(pago.getCodBanco(), 1);
                        MtMonedas mon = obtenerMoneda(pago.getCodMoneda());
                        cta = obtenerCuenta(bco, mon);

                        masterCuenta = cta;
                        masterCheque = obtenerCheque(cta);

                        cargarDetallePago(pago);
                    }
                }
            } else {
                buscarTodosRegistros();
            }
        } catch (NumberFormatException nf) {
            JOptionPane.showMessageDialog(null, "Valor ingresado no es v√°lido.",
                    "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cmdBuscarActionPerformed

    private void txtCodProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodProveedorKeyTyped
    }//GEN-LAST:event_txtCodProveedorKeyTyped

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed

        int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Est√° seguro que desea anular este pago?",
                "Pago a Proveedores.", JOptionPane.YES_NO_OPTION);

        if (showConfirmDialog == 0) {
            origen = "Anular";
            anularPago();
            buscarTodosRegistros();
            inicializarCampos();
            deshabilitarCampos();
        }
	}//GEN-LAST:event_cmdBorrarActionPerformed

    private void cboTipoPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboTipoPagoFocusLost
        if (this.cboTipoPago.getSelectedItem().toString().equals("Cheque")) {
            habilitarCheque();
            cargarBanco();
        } else {
            deshabilitarCheque();

            TsBancosCtas cta = null;

            try {
                MtBancos bco = obtenerBanco("0", 1);
                MtMonedas mon = obtenerMoneda(Integer.parseInt(this.txtCodMoneda.getText()));

                    cta = obtenerCuenta(bco, mon);
                    masterCuenta = cta;
                    masterCheque = obtenerCheque(cta);

                     this.txtSaldoCta.setValue(cta.getSaldoCuenta());
          
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_cboTipoPagoFocusLost

    private void cboBancosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboBancosFocusLost
        try {
            MtBancos bco = new MtBancos();
            if (!this.txtDescMoneda.getText().isEmpty()) {
                bco = obtenerBanco(this.cboBancos.getSelectedItem().toString(), 2);
                cargarCtaCte(bco);
            } else {
                JOptionPane.showMessageDialog(null, "Debe seleccionar una moneda.",
                        "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cboBancosFocusLost

    private void cboCtaCteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboCtaCteFocusLost

        TsBancosCtas cta = null;

        try {
            MtBancos bco = obtenerBanco(this.cboBancos.getSelectedItem().toString(), 2);
            MtMonedas mon = obtenerMoneda(Integer.parseInt(this.txtCodMoneda.getText()));

            if (this.cboCtaCte.getItemCount() > 0) {
                cta = obtenerCuenta(bco, mon);
                masterCuenta = cta;
                masterCheque = obtenerCheque(cta);

                if (this.masterCheque != null) {
                    this.txtNroCheque.setText(String.valueOf(this.masterCheque.getNroActual()));
                    this.txtSaldoCta.setValue(cta.getSaldoCuenta());
                } else {
                    JOptionPane.showMessageDialog(null, "No se ha asignado lote de cheques activos para la cuenta seleccionada.",
                            "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                 JOptionPane.showMessageDialog(null, "No existe cuenta asociada a este Banco.",
                            "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
                 this.cmdGuardar.setEnabled(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cboCtaCteFocusLost

    private void txtOrdenPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrdenPagoFocusLost
        try {
            if (!origen.equals("Editar")) {

                OrdenPago ord = null;

                if (!this.txtOrdenPago.getText().isEmpty()) {

                    ord = buscarOrdenPago(Integer.parseInt(this.txtOrdenPago.getText()), 'P');

                    if (ord != null) {
                        cargarDetalle(ord);
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txtOrdenPagoFocusLost

    private void txtReciboPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReciboPagoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReciboPagoFocusLost

    private void txtNomCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCajaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomCajaActionPerformed

    private void txtCodCajaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodCajaKeyTyped

    }//GEN-LAST:event_txtCodCajaKeyTyped

    private void txtCodCajaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCajaFocusLost
        try {
            Caja caja = null;
            txtCodCaja.setText(txtCodCaja.getText().toUpperCase());
            caja = obtenerCaja(txtCodCaja.getText());
            this.txtNomCaja.setText(caja.getNomCaja());

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al obtener descripci√≥n de la caja. ",
                    "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtCodCajaFocusLost

    private void txtReciboPagoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReciboPagoKeyTyped
        char car = evt.getKeyChar();
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtReciboPagoKeyTyped

    private void txtOrdenPagoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrdenPagoKeyTyped
        char car = evt.getKeyChar();
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtOrdenPagoKeyTyped

    private void txtTipoCambioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTipoCambioKeyTyped
        char car = evt.getKeyChar();
        if (txtTipoCambio.getText().length() >= 6) {
            evt.consume();
        }
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTipoCambioKeyTyped

    private void txtOrdenPagoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrdenPagoKeyPressed
        if (evt.getKeyCode() == VK_F9) {
            try {
                buscarOrdenPagoForm();
            } catch (NullPointerException e) {
            }
        }
    }//GEN-LAST:event_txtOrdenPagoKeyPressed

    private void btnUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoActionPerformed
        // TODO add your handling code here:
        ultimo();
    }//GEN-LAST:event_btnUltimoActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        siguiente();
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        anterior();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnPrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeroActionPerformed
        // TODO add your handling code here:
        primero();
    }//GEN-LAST:event_btnPrimeroActionPerformed

    private void cmdCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCerrarActionPerformed
        this.st.close();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cmdCerrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PagoProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PagoProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PagoProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PagoProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PagoProveedores dialog = new PagoProveedores(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnPrimero;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton btnUltimo;
    private javax.swing.JComboBox cboBancos;
    private javax.swing.JComboBox cboCtaCte;
    private javax.swing.JComboBox cboTipoPago;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdBuscar;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdCerrar;
    private javax.swing.JButton cmdEditar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdImprimir;
    private javax.swing.JButton cmdNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JLabel lblInfoPie;
    private javax.swing.JPanel panCondPago;
    private javax.swing.JPanel panFactura;
    private javax.swing.JTabbedPane tabPaneCabecera;
    private javax.swing.JTextField txtCodCaja;
    private javax.swing.JTextField txtCodEmpresa1;
    private javax.swing.JTextField txtCodMoneda;
    private javax.swing.JTextField txtCodProveedor;
    private javax.swing.JTextField txtDescMoneda;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtNomCaja;
    private javax.swing.JTextField txtNomEmpresa1;
    private javax.swing.JTextField txtNomProveedor;
    private javax.swing.JTextField txtNroCheque;
    private javax.swing.JTextField txtOrdenPago;
    private javax.swing.JTextField txtReciboPago;
    private javax.swing.JFormattedTextField txtSaldoCta;
    private javax.swing.JFormattedTextField txtTipoCambio;
    private javax.swing.JFormattedTextField txtTotalGral;
    // End of variables declaration//GEN-END:variables

    public void inicializarCampos() {
        this.txtCodProveedor.setText("");
        this.txtNomProveedor.setText("");
        this.txtOrdenPago.setText("");
        this.txtReciboPago.setText("");
        this.txtNroCheque.setText("");
        this.txtEstado.setText("");
        this.txtTipoCambio.setValue(0);
        this.txtTotalGral.setValue(0);
        this.txtSaldoCta.setValue(0);
    }

    private void habilitarCampos() {
        this.cmdGuardar.setEnabled(true);
        this.cmdCancelar.setEnabled(true);
        this.cmdBorrar.setEnabled(false);
        this.cmdNuevo.setEnabled(false);
        this.cmdEditar.setEnabled(false);
        this.txtNroCheque.setEditable(true);
        this.txtOrdenPago.setEditable(true);
        this.txtReciboPago.setEditable(true);
    }

    private void deshabilitarCampos() {
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setEnabled(false);
        this.cmdBorrar.setEnabled(true);
        this.cmdNuevo.setEnabled(true);
        this.cmdEditar.setEnabled(true);
        this.txtNroCheque.setEditable(false);
        this.txtOrdenPago.setEditable(false);
         this.txtReciboPago.setEditable(false);
    }

    private void habilitarCheque() {
        this.cboBancos.setEnabled(true);
        this.cboCtaCte.setEnabled(true);
        this.txtNroCheque.setEditable(true);
    }

    private void deshabilitarCheque() {
        this.cboBancos.setEnabled(false);
        this.cboCtaCte.setEnabled(false);
        this.txtNroCheque.setEditable(false);
        this.txtNroCheque.setText("");
        this.txtSaldoCta.setValue(0);
    }
  
    private void buscarTodosRegistros() {
        try {
            //buscar todos
            String SqlQuery = "select nro_trans from pagos_proveedor where nro_trans > 0";
            SqlQuery = SqlQuery + " order by nro_trans";

            Query consulta = st.createSQLQuery(SqlQuery);
    
            ArrayPrimaryKey = consulta.list();

            if (ArrayPrimaryKey.size() > 1) {
                posicion = 0;
                recuperarRegistros(posicion);
                this.btnPrimero.setEnabled(true);
                this.btnAnterior.setEnabled(true);
                this.btnSiguiente.setEnabled(true);
                this.btnUltimo.setEnabled(true);
                String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
                this.lblInfoPie.setText(mensaje);

            } else if (ArrayPrimaryKey.size() == 1) {
                posicion = 0;
                recuperarRegistros(posicion);
                String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
                this.lblInfoPie.setText(mensaje);

            } else {
                JOptionPane.showMessageDialog(null, "No existe registro para ser mostrado.", "Buscar", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void primero() {
        if (posicion > 0 && ArrayPrimaryKey.size() > 0) {
            posicion = 0;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else {

        }
    }

    private void anterior() {
        if (posicion > 0 && ArrayPrimaryKey.size() > 0) {
            posicion--;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else {

        }
    }

    private void siguiente() {
        if (posicion < ArrayPrimaryKey.size() - 1 && ArrayPrimaryKey.size() > 0) {
            posicion++;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else { 

        }
    }

    private void ultimo() {
        if (posicion < ArrayPrimaryKey.size() - 1 && ArrayPrimaryKey.size() > 0) {
            posicion = ArrayPrimaryKey.size() - 1;
            recuperarRegistros(posicion);
            String mensaje = "Registro " + String.valueOf(posicion + 1).trim() + " de " + String.valueOf(ArrayPrimaryKey.size()).trim();
            this.lblInfoPie.setText(mensaje);
        } else {

        }
    }

    private void recuperarRegistros(int indice) {
        try {
            
            int nroTrans = Integer.parseInt(ArrayPrimaryKey.get(indice).toString());
            PagosProveedor pago = (PagosProveedor) st.load(PagosProveedor.class, nroTrans);
            masterPago = pago;
            
            TsBancosCtas cta = null;
            MtBancos bco = obtenerBanco(pago.getCodBanco(), 1);
            MtMonedas mon = obtenerMoneda(pago.getCodMoneda());
            cta = obtenerCuenta(bco, mon);
            
            masterCuenta = cta;
            masterCheque = obtenerCheque(cta);
            
            cargarDetallePago(pago);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public MtProveedores buscarProveedor(String codigo) {
        MtProveedores proveedor = null;
        try {
            Query query = st.createQuery("From MtProveedores c Where c.nroDocum = ? and c.esActivo = 'S'");
            query.setParameter(0, codigo);
            proveedor = (MtProveedores) query.uniqueResult();

        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Existen varios Proveedores con el mismo codigo. Busque con el asistente.",
                    "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
        return proveedor;
    }

    private void valoresDefecto() {
        Caja caja = null;
        obtenerCajero(this.usuario);

        this.txtCodCaja.setText(masterCajero.getCaja().getCodCaja());
        //caja = obtenerCaja(masterCajero.getCodCaja());
        caja = masterCajero.getCaja();

        this.txtCodMoneda.setText("1");
        obtenerMoneda(1);
    }

    //obtiene descripci√≥n de moneda.
    private MtMonedas obtenerMoneda(int cod) {
        MtMonedas mon = null;
        try {
            mon = (MtMonedas) st.get(MtMonedas.class, cod);
            if (mon == null) {
                JOptionPane.showMessageDialog(null, "C√≥digo buscado no existe. Intente de nuevo.",
                        "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtDescMoneda.setText(mon.getNomMoneda());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return mon;
    }

    private MtBancos obtenerBanco(String cod, int bandera) {
        MtBancos bco = null;
        try {

            if (bandera == 2) {
                //busca por nombre del banco
                Query consulta = st.createQuery("From MtBancos b where b.nomBanco = ?");
                consulta.setParameter(0, cod);

                bco = (MtBancos) consulta.uniqueResult();
            } else {
                //busca por el codigo
                bco = (MtBancos) st.get(MtBancos.class, cod);
            }

            if (bco == null) {
                JOptionPane.showMessageDialog(null, "C√≥digo banco no existe. Intente de nuevo.",
                        "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
        return bco;
    }
    
    //retorna la caja asignada.
    private Caja obtenerCaja(String cod) {
        Caja caja = null;
        try {
            caja = (Caja) st.get(Caja.class, cod);
            if (caja == null) {
                JOptionPane.showMessageDialog(null, "C√≥digo de caja buscado no existe. Intente de nuevo.",
                        "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomCaja.setText(caja.getNomCaja());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. "
                    + "\n" + e.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
        return caja;
    }

    //obtiene el datos del cajero
    private void obtenerCajero(String cajero) {
        MtCajeros caj = null;
        try {
            Query query = st.createQuery("From MtCajeros c Where c.codUsuario = ? and c.activo = 'S'");
            query.setParameter(0, cajero);
            try {
                caj = (MtCajeros) query.uniqueResult();
                this.masterCajero = caj;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Cajero activo para varias cajas." + e.getMessage(),
                        "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al recuperar registros del Cajero."
                    + "\n" + ex.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
    }

    private TsBancosCtas obtenerCuenta(MtBancos bco, MtMonedas mon) {
        TsBancosCtas cta = null;
        /*
         From TsBancosCtas c join c.id i join c.mtMonedas m
         where i.codBanco = '1' and m.codMoneda = 1
         */
        try {
            Query consulta = st.createQuery("From TsBancosCtas c join c.id i "
                    + " where i.codBanco = ? and c.mtMonedas = ?");
            consulta.setParameter(0, bco.getCodBanco());
            consulta.setParameter(1, mon);

            cta = (TsBancosCtas) consulta.uniqueResult();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al recuperar Cuenta. "
                    + "\n" + ex.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

        return cta;
    }

    private MtCheques obtenerCheque(TsBancosCtas cta) {
        MtCheques cheque = new MtCheques();

        try {
            /* Query consulta = st.createQuery("From MtCheques c where c.tsBancosCtas = ?");*/

            /*Query consulta = st.createQuery("From MtCheques c join c.tsBancosCtas cc join cc.id i"
             + " where i.codBanco = ? and i.nroCuenta = ?");
             consulta.setParameter(0, cta.getId().getCodBanco());
             consulta.setParameter(1, cta.getId().getNroCuenta());

             cheque = (MtCheques) consulta.uniqueResult();*/
            
            Query consulta = st.createSQLQuery("select c.nrotrans from mt_cheques c "
                    + " where c.banco = ? and c.ctacte = ? and c.estado = 'A'");
            consulta.setParameter(0, cta.getId().getCodBanco());
            consulta.setParameter(1, cta.getId().getNroCuenta());

            int trans = Integer.parseInt(consulta.uniqueResult().toString());

            cheque = (MtCheques) st.get(MtCheques.class, trans);

        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "Existen varios cheques activos asignados a la misma cuenta. "
                    + "\n" + ex.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        return cheque;
    }

   /* //buscar ordenes de pago con el formulario de busqueda
    private void buscar() {
        try {
            Busqueda formBusqueda = new Busqueda(this, true, "Busqueda de Proveedores", "mt_proveedores", "nro_docum", "nom_tit");
            formBusqueda.setDefaultCloseOperation(HIDE_ON_CLOSE);
            formBusqueda.setVisible(true);
            String codigo = formBusqueda.getCodigo();
            String nombre = formBusqueda.getDescripcion();
            if (nombre != null) {
                this.txtCodProveedor.setText(codigo);
                this.txtNomProveedor.setText(nombre);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en el formulario busqueda. " + "\n"
                    + e.getMessage(), "Error - Busqueda de Proveedores", JOptionPane.ERROR_MESSAGE);
        }
    }
*/
    private void buscarOrdenPagoForm() {
        try {
            BuscarComprobante formBusqueda
                    = new BuscarComprobante(this, true, 0);
            formBusqueda.setDefaultCloseOperation(HIDE_ON_CLOSE);
            formBusqueda.setVisible(true);
            formBusqueda.setTitle("Buscar - Orden de Pago Pendientes");

            String codigo = formBusqueda.getCodigoRetorno();

            if (!codigo.equals("0")) {
                this.txtOrdenPago.setText(codigo);
                OrdenPago ord = buscarOrdenPago(Integer.parseInt(codigo),'P');
                cargarDetalle(ord);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al realizar b√∫squeda de orden de pagos. " + "\n"
                    + e.getMessage(), "Error de B√∫squeda", JOptionPane.ERROR_MESSAGE);
        }
    }

    private OrdenPago buscarOrdenPago(int nroOrden, char estado) {
        OrdenPago ord = new OrdenPago();
        try {
            Query consulta = st.createQuery("From OrdenPago o where o.nroOpago = ?"
                    + " and o.estado = ?");
            consulta.setParameter(0, nroOrden);
            consulta.setParameter(1, estado);

            ord = (OrdenPago) consulta.uniqueResult();

            if (ord == null && origen.equals("Nuevo")) {
                JOptionPane.showMessageDialog(null, "Orden de Pago no existe o ya fue cancelada.",
                        "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al realizar consulta de orden de pago."
                    + "\n" + ex.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        return ord;
    }

    private MtProveedores obtenerProveedor(String cod) {
        MtProveedores prov = new MtProveedores();
        try {
            prov = (MtProveedores) st.get(MtProveedores.class, cod);
            if (prov == null) {
                JOptionPane.showMessageDialog(null, "Proveedor no existe.",
                        "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al realizar consulta de orden de pago."
                    + "\n" + ex.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
        return prov;
    }

    private PagosProveedor buscarPagoProveedor(int ord) {
        PagosProveedor retorno = new PagosProveedor();
        try {
            Query consulta = st.createQuery("From PagosProveedor p where p.ordenPago = ?");
            consulta.setParameter(0, ord);

            retorno = (PagosProveedor) consulta.uniqueResult();
            masterPago = retorno;
            if (retorno == null) {
                JOptionPane.showMessageDialog(null, "La n√∫mero de Pago " + ord + " no existe o a√∫n no fue cancelada.",
                        "Pago a Proveedores", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al realizar consulta de pagos a proveedor."
                    + "\n" + ex.getMessage(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
        return retorno;
    }

    private int buscarTipoCambio(int cod){
        Cargar cargar = new Cargar();
        BigDecimal tipoCambio = cargar.buscarTipoCambio(new Date(), cod, 'V');
        int retorno = 0;
        
        retorno = tipoCambio.intValue();
        
        return retorno;
    }
    
    private void guardar() {
        Date fecha = new Date();
        PagosProveedor pago = new PagosProveedor();
        BigDecimal total = new BigDecimal(this.txtTotalGral.getValue().toString());

        try {
            st.clear();
            st.beginTransaction();
            //para pagos con cheque via acuenta corriente
            if (this.cboTipoPago.getSelectedItem().toString().equals("Cheque")) {
                BigDecimal saldo = masterCuenta.getSaldoCuenta();

                if (saldo.compareTo(total) == -1) {
                    JOptionPane.showMessageDialog(null, "Saldo no disponible para pagar Orden de Pago.",
                            "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
                    this.txtOrdenPago.grabFocus();

                } else {
                    
                    BigInteger nroTrans = obtenerNroTrans();

                    if (origen.equals("Nuevo")) {

                        pago.setNroTrans(nroTrans.intValue());
                        pago.setOrdenPago(Integer.parseInt(this.txtOrdenPago.getText()));
                        pago.setCodProveedor(this.txtCodProveedor.getText());
                        pago.setFormaPago(5);
                        pago.setRefPago(Integer.parseInt(this.txtNroCheque.getText()));
                        pago.setCodBanco(this.masterCheque.getTsBancosCtas().getId().getCodBanco());
                        pago.setNroCuenta(this.masterCheque.getTsBancosCtas().getId().getNroCuenta());
                        pago.setImporte(total);
                        pago.setEstado('C');
                        pago.setCodMoneda(Integer.parseInt(this.txtCodMoneda.getText()));
                        pago.setTipoCambio(Integer.parseInt(this.txtTipoCambio.getText()));
                        pago.setNroReciboPago(this.txtReciboPago.getText());
                        pago.setCodCaja(this.txtCodCaja.getText());
                        pago.setAccionMod(origen);
                        pago.setUsuarioMod(this.usuario);
                        pago.setFechaMod(fecha);

                        st.save(pago);
                        
                        actualizarCheque(pago.getImporte(), 1);
                        actualizarEstadoOP(pago.getOrdenPago(), 'P', 'C');

                    } else {

                        pago = masterPago;

                        pago.setFormaPago(5);
                        pago.setRefPago(Integer.parseInt(this.txtNroCheque.getText()));
                        pago.setCodBanco(this.masterCheque.getTsBancosCtas().getId().getCodBanco());
                        pago.setNroCuenta(this.masterCheque.getTsBancosCtas().getId().getNroCuenta());
                        pago.setImporte(total);
                        pago.setNroReciboPago(this.txtReciboPago.getText());
                        pago.setCodCaja(this.txtCodCaja.getText());
                        pago.setEstado('C');
                        pago.setCodMoneda(Integer.parseInt(this.txtCodMoneda.getText()));
                        pago.setTipoCambio(Integer.parseInt(this.txtTipoCambio.getText()));
                        pago.setAccionMod(origen);
                        pago.setUsuarioMod(this.usuario);
                        pago.setFechaMod(fecha);

                        st.update(pago);

                    }
                }
                //pagos en efectivo
            } else {

                BigInteger nroTrans = obtenerNroTrans();

                if (origen.equals("Nuevo")) {
                    pago.setNroTrans(nroTrans.intValue());
                    pago.setOrdenPago(Integer.parseInt(this.txtOrdenPago.getText()));
                    pago.setCodProveedor(this.txtCodProveedor.getText());
                    pago.setFormaPago(1);
                    pago.setRefPago(0);
                    pago.setCodBanco("0");
                    pago.setNroCuenta(this.txtCodMoneda.getText());
                    pago.setImporte(total);
                    pago.setEstado('C');
                    pago.setCodMoneda(Integer.parseInt(this.txtCodMoneda.getText()));
                    pago.setTipoCambio(Integer.parseInt(this.txtTipoCambio.getText()));
                    pago.setNroReciboPago(this.txtReciboPago.getText());
                    pago.setCodCaja(this.txtCodCaja.getText());
                    pago.setAccionMod(origen);
                    pago.setUsuarioMod(this.usuario);
                    pago.setFechaMod(fecha);

                    st.save(pago);
                    actualizarCheque(pago.getImporte(), 1);
                    actualizarEstadoOP(pago.getOrdenPago(), 'P', 'C');

                } else {

                    pago = masterPago;

                    pago.setOrdenPago(Integer.parseInt(this.txtOrdenPago.getText()));
                    pago.setCodProveedor(this.txtCodProveedor.getText());
                    pago.setFormaPago(1);
                    pago.setRefPago(0);
                    pago.setCodBanco("0");
                    pago.setNroCuenta(this.txtCodMoneda.getText());
                    pago.setImporte(total);
                    pago.setEstado('C');
                    pago.setCodMoneda(Integer.parseInt(this.txtCodMoneda.getText()));
                    pago.setTipoCambio(Integer.parseInt(this.txtTipoCambio.getText()));
                    pago.setNroReciboPago(this.txtReciboPago.getText());
                    pago.setCodCaja(this.txtCodCaja.getText());
                    pago.setAccionMod(origen);
                    pago.setUsuarioMod(this.usuario);
                    pago.setFechaMod(fecha);

                    st.update(pago);
                }
            }

            st.getTransaction().commit();
            
        } catch (Exception ex) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al guardar el Pago a Proveedores. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(), "Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        deshabilitarCampos();
    }

    private void cargarBanco() {
        this.cboBancos.removeAllItems();
        List<MtBancos> lista = (List<MtBancos>) st.createQuery("From MtBancos").list();
        for (MtBancos tipoList : lista) {
            this.cboBancos.addItem(tipoList.getNomBanco());
        }
    }

    private void cargarCtaCte(MtBancos bco) {
        String codBco = bco.getCodBanco();
        int codMoneda = Integer.parseInt(this.txtCodMoneda.getText());

        this.cboCtaCte.removeAllItems();

        Query consulta = st.createSQLQuery("Select c.nro_cuenta From ts_bancos_ctas c "
                + "where c.cod_banco = ? and cod_moneda = ?");
        consulta.setParameter(0, codBco);
        consulta.setParameter(1, codMoneda);

        try {
            List<String> lista
                    = (List<String>) consulta.list();

            for (String cta : lista) {
                this.cboCtaCte.addItem(cta);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al ejecutar la busqueda de cuentas corrientes. "
                    + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Error de B√∫squeda", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void actualizarEstadoOP(int op, char estadoActual, char estadoNuevo) {
        OrdenPago opago = buscarOrdenPago(op, estadoActual);

        try {
            if (opago != null) {
                opago.setEstado(estadoNuevo);
                st.update(opago);
            }

        } catch (Exception e) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al actualizar estdo de la Orden de Pago: "
                    + op + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Error - Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void actualizarCheque(BigDecimal importe, int factor) {
        MtCheques cheque = masterCheque;
        TsBancosCtas cta = masterCuenta;
        int actual = cheque.getNroActual();

        try {
            BigDecimal saldo = cta.getSaldoCuenta();
            BigDecimal monto = importe.multiply(BigDecimal.valueOf(factor));

            if (origen.equals("Nuevo")) {
                cheque.setNroActual(actual + 1);
                st.update(cheque);
            }
            
            cta.setSaldoCuenta((saldo.subtract(monto)));

            st.update(cta);
            
        } catch (Exception e) {
            st.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "Error al actualizar registros del cheque actual. "
                    + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Error - Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public void anularPago() {
        PagosProveedor pago = masterPago;

        try {
            st.beginTransaction();
            
            pago.setEstado('A');
            actualizarCheque(pago.getImporte(), -1);
            actualizarEstadoOP(pago.getOrdenPago(), 'C', 'P');
            
            st.update(pago);
            st.getTransaction().commit();

        } catch (Exception e) {
            st.getTransaction().rollback();
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al anular pago. "
                    + "\n" + e.getMessage() + "\n" + e.getCause(),
                    "Error - Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
        }
    }

    private BigInteger obtenerNroTrans() {
        BigInteger nroTrans = BigInteger.ZERO;

        try {
            Query query = st.createSQLQuery("SELECT NEXTVAL('nro_trans_seq')");
            nroTrans = (BigInteger) query.uniqueResult();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al generar nro. de transacci√≥n. "
                    + "\n" + ex.getMessage() + "\n" + ex.getCause(),
                    "Facturaci√≥n", JOptionPane.ERROR_MESSAGE);
        }
        return nroTrans;
    }

    private void cargarDetalle(OrdenPago ord) {
        try {
            if (!this.txtOrdenPago.getText().equals("")) {

                if (ord != null) {
                    this.txtCodProveedor.setText(ord.getMtProveedores().getNroDocum());
                    this.txtNomProveedor.setText(ord.getMtProveedores().getNomTit());
                    this.txtTotalGral.setValue(ord.getTotal());
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al cargar datos de la Orden de Pago."
                    + ex.getMessage() + "\n" + ex.getCause(),
                    "Error - Pago a Proveedores", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void cargarDetallePago(PagosProveedor pago) {
        MtProveedores prov = obtenerProveedor(pago.getCodProveedor());
        MtBancos banco = new MtBancos();
        Caja caja = obtenerCaja(pago.getCodCaja());
        
        banco = obtenerBanco(pago.getCodBanco(), 1);

        this.txtOrdenPago.setText(String.valueOf(pago.getOrdenPago()));
        this.txtCodProveedor.setText(pago.getCodProveedor());
        this.txtNomProveedor.setText(prov.getNomTit());
        this.txtCodCaja.setText(pago.getCodCaja());
        this.txtNomCaja.setText(caja.getNomCaja());
        this.txtReciboPago.setText(pago.getNroReciboPago());
        this.txtTotalGral.setValue(pago.getImporte());
        if (pago.getFormaPago() == 1) {
            this.cboTipoPago.setSelectedItem("Efectivo");
        } else {
            this.cboTipoPago.setSelectedItem("Cheque");
            this.cboBancos.setSelectedItem(banco.getNomBanco());
            this.cboCtaCte.setSelectedItem(pago.getNroCuenta());
        }
        this.txtCodMoneda.setText(String.valueOf(pago.getCodMoneda()));
        this.txtTipoCambio.setValue(pago.getTipoCambio());
        this.txtNroCheque.setText(String.valueOf(pago.getRefPago()));
        
        this.txtEstado.setText(obtenerEstado(pago.getEstado()));
    }

    public String obtenerEstado(char estado) {
        String retorno = "";
        switch (estado) {
            case 'A':
                retorno = "ANULADO";
                break;
            case 'P':
                retorno = "PENDIENTE";
                break;
            case 'C':
                retorno = "CANCELADO";
                break;
            default:
                break;
        }
        return retorno;
    }
    
    private void imprimir(int nroTrans) {
        try {
            Connection conexion;
            conexion = DriverManager.getConnection("jdbc:postgresql://localhost:5432/karu", "karu", "karu");
            System.out.println("Conexion Establecida");
            Map parametros = new HashMap();
            //parametros que enviamos al report.
            parametros.put("nroTrans", nroTrans);
            JasperReport elReporte = (JasperReport) JRLoader.loadObject(ClassLoader.getSystemResource("com/informes/PagoProveedores.jasper"));
            JasperPrint imprimir = JasperFillManager.fillReport(elReporte, parametros, conexion);
            //JasperPrint imprimir = JasperFillManager.fillReport(elReporte, null, conexion);
            JasperViewer visor = new JasperViewer(imprimir, false);
            visor.setTitle("Pago a Proveedores");
            visor.setVisible(true);
            conexion.close();
            System.out.println("Conexion Cerrada");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void imprimir() {

    }
}
