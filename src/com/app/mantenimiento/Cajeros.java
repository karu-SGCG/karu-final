/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.app.mantenimiento;

import com.entidades.Caja;
import com.entidades.MtAreas;
import com.entidades.MtCajeros;
import com.entidades.MtSucursales;
import com.entidades.MtUsuarios;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;
import util.HibernateUtil;

import java.awt.HeadlessException;
import java.util.Date;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.HibernateException;
import com.app.seguridad.Permisos;

/**
 *
 * @author Carlos Patino
 */
public class Cajeros extends javax.swing.JDialog {

    private String usuario;
    private String origen;
    private String formulario;

    /**
     * Creates new form Formularios
     *
     * @param parent
     * @param modal
     */
    public Cajeros(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setLocationRelativeTo(null);
        initComponents();
        hibernateSession();
        arranque();
        this.usuario = "karu";
        this.formulario = "Cajeros";
    }

    public Cajeros(String user) {
        setLocationRelativeTo(null);
        initComponents();
        hibernateSession();
        this.setUsuario(user);
        this.cmdCancelar.setVisible(false);
        this.formulario = this.getClass().getSimpleName();
        arranque();
    }

    private Session st;
    private DefaultTableModel model;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cmdNuevo = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdEditar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        cmdReporte = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtUsuario = new javax.swing.JTextField();
        txtSucursal = new javax.swing.JTextField();
        txtNomUsuario = new javax.swing.JTextField();
        txtNomSucursal = new javax.swing.JTextField();
        txtCaja = new javax.swing.JTextField();
        txtNomCaja = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cboActivo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabCajeros = new javax.swing.JTable();
        cmdCerrar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento de Cajeros - KARU v1.0");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mantenimiento de Cajeros");
        jLabel1.setToolTipText("");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmdNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/New.png"))); // NOI18N
        cmdNuevo.setToolTipText("Nuevo");
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });

        cmdGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Save.png"))); // NOI18N
        cmdGuardar.setToolTipText("Guardar");
        cmdGuardar.setMaximumSize(new java.awt.Dimension(91, 33));
        cmdGuardar.setMinimumSize(new java.awt.Dimension(91, 33));
        cmdGuardar.setPreferredSize(new java.awt.Dimension(91, 33));
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/edit.png"))); // NOI18N
        cmdEditar.setToolTipText("Editar");
        cmdEditar.setMaximumSize(new java.awt.Dimension(91, 33));
        cmdEditar.setMinimumSize(new java.awt.Dimension(91, 33));
        cmdEditar.setPreferredSize(new java.awt.Dimension(91, 33));
        cmdEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditarActionPerformed(evt);
            }
        });

        cmdBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Trashcan_empty.png"))); // NOI18N
        cmdBorrar.setToolTipText("Borrar");
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });

        cmdCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/cancel32.png"))); // NOI18N
        cmdCancelar.setToolTipText("Cancelar");
        cmdCancelar.setMaximumSize(new java.awt.Dimension(91, 33));
        cmdCancelar.setMinimumSize(new java.awt.Dimension(91, 33));
        cmdCancelar.setPreferredSize(new java.awt.Dimension(91, 33));
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        cmdReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/imagenes/Tasks.png"))); // NOI18N
        cmdReporte.setToolTipText("Informe");
        cmdReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmdReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmdCancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdNuevo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdEditar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdBorrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdReporte, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 3, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setText("Código");

        jLabel3.setText("Usuario");

        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });

        txtUsuario.setEditable(false);
        txtUsuario.setBackground(new java.awt.Color(255, 255, 255));
        txtUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUsuarioFocusLost(evt);
            }
        });

        txtSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSucursalActionPerformed(evt);
            }
        });
        txtSucursal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSucursalFocusLost(evt);
            }
        });

        txtNomUsuario.setEditable(false);
        txtNomUsuario.setBackground(java.awt.SystemColor.controlHighlight);

        txtNomSucursal.setEditable(false);
        txtNomSucursal.setBackground(java.awt.SystemColor.controlHighlight);

        txtCaja.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCajaFocusLost(evt);
            }
        });

        txtNomCaja.setEditable(false);
        txtNomCaja.setBackground(java.awt.SystemColor.controlHighlight);

        jLabel4.setText("Sucursal");

        jLabel5.setText("Caja");

        cboActivo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "S", "N" }));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Está Activo?");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(txtUsuario)
                    .addComponent(txtSucursal)
                    .addComponent(txtCaja))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtNomSucursal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                        .addComponent(txtNomUsuario, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtNomCaja))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cboActivo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cboActivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        tabCajeros.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tabCajeros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Usuario", "Sucursal", "Caja", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabCajeros.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabCajeros.setEnabled(false);
        tabCajeros.getTableHeader().setReorderingAllowed(false);
        tabCajeros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabCajerosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabCajeros);

        cmdCerrar.setText("Cerrar");
        cmdCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmdCerrar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator1)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdCerrar)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCerrarActionPerformed
        this.st.close();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cmdCerrarActionPerformed

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        Permisos per = new Permisos();
        Boolean inserto = per.PuedeInsertar(usuario, formulario);
        if (!inserto) {
            JOptionPane.showMessageDialog(null, "El usuario " + usuario + " no tiene permiso para insertar"
                    + " en el formulario " + formulario, "Permisos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            arranque();
            this.setOrigen("Nuevo");
            this.cmdBorrar.setEnabled(false);
            this.cmdEditar.setEnabled(false);
            this.cmdGuardar.setEnabled(true);
            this.cmdCancelar.setVisible(true);
            this.txtUsuario.setEditable(true);
            this.txtCodigo.setEditable(true);
            this.tabCajeros.setEnabled(false);
        }
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        guardar();
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        arranque();
        this.cmdBorrar.setEnabled(true);
        this.cmdEditar.setEnabled(true);
        this.cmdCancelar.setVisible(false);
        this.txtUsuario.setEditable(false);
        this.txtCodigo.setEditable(false);
        this.tabCajeros.setEnabled(true);
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
        Permisos per = new Permisos();
        Boolean elimino = per.PuedeEliminar(usuario, formulario);
        if (!elimino) {
            JOptionPane.showMessageDialog(null, "El usuario " + usuario + " no tiene permiso para eliminar"
                    + " en el formulario " + formulario, "Permisos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int selectedRow = this.tabCajeros.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un registro a eliminar.",
                        "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
            } else {
                int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Eliminación de Registro",
                        "Desea eliminar este registro.", JOptionPane.YES_NO_OPTION);
                if (showConfirmDialog == 1) {
                    JOptionPane.showMessageDialog(null, "Registro no eliminado.",
                            "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    try {
                        st.beginTransaction();
                        Object valueAt = model.getValueAt(selectedRow, 0);
                        String codArea = valueAt.toString();
                        MtAreas registro = (MtAreas) st.load(MtAreas.class, codArea);
                        st.delete(registro);
                        st.getTransaction().commit();
                        JOptionPane.showMessageDialog(null, "Registro eliminado.", "Mantenimiento de Cajeros",
                                JOptionPane.INFORMATION_MESSAGE);
                        arranque();
                    } catch (HibernateException | HeadlessException ex) {
                        JOptionPane.showMessageDialog(null, "Ocurrió un error al eliminar el registro. " + ex.getMessage(),
                                "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_cmdBorrarActionPerformed

    private void cmdEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditarActionPerformed
        Permisos per = new Permisos();
        Boolean edito = per.PuedeModificar(usuario, formulario);
        if (!edito) {
            JOptionPane.showMessageDialog(null, "El usuario " + usuario + " no tiene permiso para editar"
                    + " en el formulario " + formulario, "Permisos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.setOrigen("Editar");
            this.cmdGuardar.setEnabled(true);
            this.cmdCancelar.setVisible(true);
            this.txtUsuario.setEditable(true);
            this.txtCodigo.setEditable(true);
            this.tabCajeros.setEnabled(false);
        }
    }//GEN-LAST:event_cmdEditarActionPerformed

    private void tabCajerosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabCajerosMouseClicked
        seleccionarItem();
    }//GEN-LAST:event_tabCajerosMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed

    private void cmdReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReporteActionPerformed
        informe();
    }//GEN-LAST:event_cmdReporteActionPerformed

    private void txtSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSucursalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSucursalActionPerformed

    private void txtCajaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCajaFocusLost
       obtenerCaja(this.txtCaja.getText());
    }//GEN-LAST:event_txtCajaFocusLost

    private void txtSucursalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSucursalFocusLost
       obtenerSucursal(this.txtSucursal.getText());
    }//GEN-LAST:event_txtSucursalFocusLost

    private void txtUsuarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsuarioFocusLost
       obtenerUsuario(this.txtUsuario.getText());
    }//GEN-LAST:event_txtUsuarioFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cajeros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Cajeros dialog = new Cajeros(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboActivo;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdCerrar;
    private javax.swing.JButton cmdEditar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdNuevo;
    private javax.swing.JButton cmdReporte;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tabCajeros;
    private javax.swing.JTextField txtCaja;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNomCaja;
    private javax.swing.JTextField txtNomSucursal;
    private javax.swing.JTextField txtNomUsuario;
    private javax.swing.JTextField txtSucursal;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    private void setUsuario(String user) {
        this.usuario = user;
    }

    public String getUsuario() {
        return this.usuario;
    }

    private void setOrigen(String orig) {
        this.origen = orig;
    }

    public String getOrigen() {
        return this.origen;
    }

    private void hibernateSession() {
        st = HibernateUtil.getSessionFactory().openSession();
    }

    private void arranque() {
        this.txtUsuario.setText("");
        this.txtCodigo.setText("");
        this.txtCaja.setText("");
        this.txtSucursal.setText("");
        this.cmdGuardar.setEnabled(false);
        this.cmdCancelar.setVisible(false);
        tableModel();
        cargarTabla();
    }

    public void tableModel() {
        model = (DefaultTableModel) this.tabCajeros.getModel();
        model.setNumRows(0);
    }

    public void cargarTabla() {
        try {
            List<MtCajeros> lista = (List<MtCajeros>) st.createQuery("from MtCajeros").list();
            if (lista == null) {
                JOptionPane.showMessageDialog(null, "No hay registros que mostrar. ",
                    "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (MtCajeros cajeroList : lista) {
                    model.addRow(new Object[]{
                        cajeroList.getNroTrans(), cajeroList.getMtUsuarios().getCodUsuario(), 
                        cajeroList.getMtSucursales().getCodSucursal(),
                        cajeroList.getCaja().getCodCaja(), cajeroList.getActivo()});
                }
            }
        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al cargar la grilla. " + ex.getMessage(),
                    "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void guardar() {
        Date fecha = new Date();
        if (this.txtCodigo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese nro. código para el registro",
                    "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
            this.txtCodigo.grabFocus();
        } else {
            if (this.txtUsuario.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Ingrese una descripción para el registro.",
                        "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
                this.txtUsuario.grabFocus();
            } else {
                // procede a la persistencia del registro.
                if (this.origen.equals("Nuevo")) {
                    if (validarId(Integer.parseInt(this.txtCodigo.getText()))) {
                        try {
                            st.beginTransaction();
                            MtCajeros cajero = new MtCajeros();
                            String estado = this.cboActivo.getSelectedItem().toString();
                            char c = estado.charAt(0);
                            
                            cajero.setMtUsuarios(obtenerUsuario(this.txtUsuario.getText()));
                            cajero.setMtSucursales(obtenerSucursal(this.txtSucursal.getText()));
                            cajero.setCaja(obtenerCaja(this.txtCaja.getText()));
                            cajero.setActivo(c);
                            cajero.setAccionMod("Nuevo");
                            cajero.setUsuarioMod(this.getUsuario());
                            cajero.setFechaMod(fecha);

                            st.save(cajero);
                            st.getTransaction().commit();
                            JOptionPane.showMessageDialog(null, "El regsitro fue agregado exitosamente.",
                                    "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
                            arranque();
                        } catch (HibernateException | HeadlessException ex) {
                            JOptionPane.showMessageDialog(null, "Error al guardar registro. " + ex.getMessage(),
                                    "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "El código de resgitro ya existe.",
                                "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
                        this.txtCodigo.grabFocus();
                    }
                } else {
                    // procede a la persistencia del registro.
                    try {
                        st.beginTransaction();
                        int codigo = Integer.parseInt(this.txtCodigo.getText());
                        MtCajeros cajero = (MtCajeros) st.load(MtCajeros.class, codigo);

                        String estado = this.cboActivo.getSelectedItem().toString();
                        char c = estado.charAt(0);

                        cajero.setMtUsuarios(obtenerUsuario(this.txtUsuario.getText()));
                        cajero.setMtSucursales(obtenerSucursal(this.txtSucursal.getText()));
                        cajero.setCaja(obtenerCaja(this.txtCaja.getText()));
                        cajero.setActivo(c);
                        cajero.setAccionMod("Editar");
                        cajero.setUsuarioMod(this.getUsuario());
                        cajero.setFechaMod(fecha);
                        st.update(cajero);
                        st.getTransaction().commit();
                        
                        JOptionPane.showMessageDialog(null, "Registro actualizado correctamente.",
                                "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
                        arranque();

                    } catch (HibernateException | HeadlessException ex) {
                        st.beginTransaction().rollback();
                        JOptionPane.showMessageDialog(null, "Error al guardar registro. " + ex.getMessage(),
                                "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        this.cmdEditar.setEnabled(true);
        this.cmdBorrar.setEnabled(true);
        this.txtUsuario.setEditable(false);
        this.txtCodigo.setEditable(false);
        this.tabCajeros.setEnabled(true);
    }

    private void seleccionarItem() {
        int selectedRow = this.tabCajeros.getSelectedRow();
        Object nro_trans = model.getValueAt(selectedRow, 0);
        Object cajero = model.getValueAt(selectedRow, 1);
        Object sucursal = model.getValueAt(selectedRow, 2);
        Object caja = model.getValueAt(selectedRow, 3);
        Object activo = model.getValueAt(selectedRow, 4);
        
        this.txtCodigo.setText(nro_trans.toString());
        this.txtUsuario.setText(cajero.toString());
        this.txtSucursal.setText(sucursal.toString());
        this.txtCaja.setText(caja.toString());
        this.cboActivo.setSelectedItem(activo.toString());
        
        obtenerCaja(this.txtCaja.getText());
        obtenerSucursal(this.txtSucursal.getText());
        obtenerUsuario(this.txtUsuario.getText());
    }

    public boolean validarId(int id) {
        boolean respuesta = false;
        try {
            MtCajeros consulta = (MtCajeros) st.get(MtCajeros.class, id);
            if (consulta == null) {
                respuesta = true;
            } else {
                respuesta = false;
            }
        } catch (HibernateException ex) {
            JOptionPane.showMessageDialog(null, "Ocurrio al validar el Codigo. " + ex.getMessage(),
                    "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
        }
        return respuesta;
    }

    public Caja obtenerCaja(String cod) {
        Caja caja = null;
        try {
            caja = (Caja) st.load(Caja.class, cod);
            if (caja == null) {
                JOptionPane.showMessageDialog(null, "Código de caja buscado no existe. Intente de nuevo.",
                        "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomCaja.setText(caja.getNomCaja());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " + e.getMessage(),
                    "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
        }
        return caja;
    }

    public MtSucursales obtenerSucursal(String cod) {
        MtSucursales suc = null;
        try {
            suc = (MtSucursales) st.load(MtSucursales.class, cod);
            if (suc == null) {
                JOptionPane.showMessageDialog(null, "Código de sucursal buscado no existe. Intente de nuevo.",
                        "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomSucursal.setText(suc.getNomSucursal());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " + e.getMessage(),
                    "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
        }
        return suc;
    }

    public MtUsuarios obtenerUsuario(String cod) {
        MtUsuarios user = null;
        try {
            user = (MtUsuarios) st.load(MtUsuarios.class, cod);
            if (user == null) {
                JOptionPane.showMessageDialog(null, "Código de usuario buscado no existe. Intente de nuevo.",
                        "Mantenimiento de Cajeros", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.txtNomUsuario.setText(user.getNomUsuario());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error al realizar consulta. " + e.getMessage(),
                    "Mantenimiento de Cajeros", JOptionPane.ERROR_MESSAGE);
        }
        return user;
    }
     
    public void informe() {
        //try - para controlar las excepciones.
        try {
            //Creamos una lista de los datos de la table "Tipo" utilizando "List".
            st.beginTransaction();
            List<MtAreas> lista = (List<MtAreas>) st.createQuery("From MtAreas").list();
            //Utilizamos el método siguiente para cargar el reporte "TipoReport.jasper"
            //El "JRLoader.loadObject" es el cargador.
            JasperReport report = (JasperReport) JRLoader.loadObject(ClassLoader.getSystemResource("com/informes/Areas.jasper"));
            //El método siguiente nos permite pasarle los datos al reporte utilizando JRBeanCollectionDataSource y como argumento la lista que creamos más arriba.
            //La lista posee dos campos por registro: "id" y "des", los nombres se corresponden con las agregadas en el reporte diseñado.
            JasperPrint fillReport = JasperFillManager.fillReport(report, null, new JRBeanCollectionDataSource(lista));
            //El JasperViewer para visualizar, le pasamos como argumento nuestro "fillReport" de arriba.
            JasperViewer jviewer = new JasperViewer(fillReport, false);
            jviewer.setTitle("Lista de Cajeros.");
            //La hacemos visible.
            jviewer.setVisible(true);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(null, "Error cargando reporte." + e.getMessage());
        }
    }
}
